
stmACS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08006ac4  08006ac4  00016ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b28  08006b28  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006b28  08006b28  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b28  08006b28  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b28  08006b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b2c  08006b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000118c  20000010  08006b40  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000119c  08006b40  0002119c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142d3  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b1f  00000000  00000000  0003430c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001390  00000000  00000000  00036e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001270  00000000  00000000  000381c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019a94  00000000  00000000  00039430  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f1d6  00000000  00000000  00052ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000945cc  00000000  00000000  0006209a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f6666  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000526c  00000000  00000000  000f66e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08006aac 	.word	0x08006aac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08006aac 	.word	0x08006aac

08000150 <__clear_cache>:
 8000150:	4770      	bx	lr
 8000152:	bf00      	nop

08000154 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000154:	b480      	push	{r7}
 8000156:	b085      	sub	sp, #20
 8000158:	af00      	add	r7, sp, #0
 800015a:	60f8      	str	r0, [r7, #12]
 800015c:	60b9      	str	r1, [r7, #8]
 800015e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	4a06      	ldr	r2, [pc, #24]	; (800017c <vApplicationGetIdleTaskMemory+0x28>)
 8000164:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000166:	68bb      	ldr	r3, [r7, #8]
 8000168:	4a05      	ldr	r2, [pc, #20]	; (8000180 <vApplicationGetIdleTaskMemory+0x2c>)
 800016a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2280      	movs	r2, #128	; 0x80
 8000170:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000172:	bf00      	nop
 8000174:	3714      	adds	r7, #20
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr
 800017c:	2000002c 	.word	0x2000002c
 8000180:	20000080 	.word	0x20000080

08000184 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8000184:	b580      	push	{r7, lr}
 8000186:	b086      	sub	sp, #24
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	4608      	mov	r0, r1
 800018e:	4611      	mov	r1, r2
 8000190:	461a      	mov	r2, r3
 8000192:	4603      	mov	r3, r0
 8000194:	70fb      	strb	r3, [r7, #3]
 8000196:	460b      	mov	r3, r1
 8000198:	70bb      	strb	r3, [r7, #2]
 800019a:	4613      	mov	r3, r2
 800019c:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 800019e:	2300      	movs	r3, #0
 80001a0:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 80001a2:	4a4f      	ldr	r2, [pc, #316]	; (80002e0 <lcdInit+0x15c>)
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 80001a8:	78fb      	ldrb	r3, [r7, #3]
 80001aa:	005b      	lsls	r3, r3, #1
 80001ac:	b2da      	uxtb	r2, r3
 80001ae:	4b4c      	ldr	r3, [pc, #304]	; (80002e0 <lcdInit+0x15c>)
 80001b0:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 80001b2:	4a4b      	ldr	r2, [pc, #300]	; (80002e0 <lcdInit+0x15c>)
 80001b4:	78bb      	ldrb	r3, [r7, #2]
 80001b6:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 80001b8:	4a49      	ldr	r2, [pc, #292]	; (80002e0 <lcdInit+0x15c>)
 80001ba:	787b      	ldrb	r3, [r7, #1]
 80001bc:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 80001be:	4b48      	ldr	r3, [pc, #288]	; (80002e0 <lcdInit+0x15c>)
 80001c0:	2208      	movs	r2, #8
 80001c2:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 80001c4:	4b47      	ldr	r3, [pc, #284]	; (80002e4 <lcdInit+0x160>)
 80001c6:	2234      	movs	r2, #52	; 0x34
 80001c8:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 80001ca:	4b46      	ldr	r3, [pc, #280]	; (80002e4 <lcdInit+0x160>)
 80001cc:	781a      	ldrb	r2, [r3, #0]
 80001ce:	4b45      	ldr	r3, [pc, #276]	; (80002e4 <lcdInit+0x160>)
 80001d0:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 80001d2:	4b44      	ldr	r3, [pc, #272]	; (80002e4 <lcdInit+0x160>)
 80001d4:	2230      	movs	r2, #48	; 0x30
 80001d6:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 80001d8:	2300      	movs	r3, #0
 80001da:	75fb      	strb	r3, [r7, #23]
 80001dc:	e030      	b.n	8000240 <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 80001de:	4b40      	ldr	r3, [pc, #256]	; (80002e0 <lcdInit+0x15c>)
 80001e0:	6818      	ldr	r0, [r3, #0]
 80001e2:	4b3f      	ldr	r3, [pc, #252]	; (80002e0 <lcdInit+0x15c>)
 80001e4:	799b      	ldrb	r3, [r3, #6]
 80001e6:	b299      	uxth	r1, r3
 80001e8:	2303      	movs	r3, #3
 80001ea:	4a3e      	ldr	r2, [pc, #248]	; (80002e4 <lcdInit+0x160>)
 80001ec:	f001 ff0a 	bl	8002004 <HAL_I2C_Master_Transmit_DMA>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <lcdInit+0x76>
            return false;
 80001f6:	2300      	movs	r3, #0
 80001f8:	e06d      	b.n	80002d6 <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 80001fa:	f005 fe37 	bl	8005e6c <xTaskGetTickCount>
 80001fe:	4603      	mov	r3, r0
 8000200:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000202:	e002      	b.n	800020a <lcdInit+0x86>
            vTaskDelay(1);
 8000204:	2001      	movs	r0, #1
 8000206:	f005 fcf5 	bl	8005bf4 <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 800020a:	4b35      	ldr	r3, [pc, #212]	; (80002e0 <lcdInit+0x15c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4618      	mov	r0, r3
 8000210:	f002 fa80 	bl	8002714 <HAL_I2C_GetState>
 8000214:	4603      	mov	r3, r0
 8000216:	2b20      	cmp	r3, #32
 8000218:	d1f4      	bne.n	8000204 <lcdInit+0x80>
        }

        if (i == 2) {
 800021a:	7dfb      	ldrb	r3, [r7, #23]
 800021c:	2b02      	cmp	r3, #2
 800021e:	d106      	bne.n	800022e <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	2101      	movs	r1, #1
 8000226:	4618      	mov	r0, r3
 8000228:	f005 fc6a 	bl	8005b00 <vTaskDelayUntil>
 800022c:	e005      	b.n	800023a <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 800022e:	f107 0310 	add.w	r3, r7, #16
 8000232:	2105      	movs	r1, #5
 8000234:	4618      	mov	r0, r3
 8000236:	f005 fc63 	bl	8005b00 <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 800023a:	7dfb      	ldrb	r3, [r7, #23]
 800023c:	3301      	adds	r3, #1
 800023e:	75fb      	strb	r3, [r7, #23]
 8000240:	7dfb      	ldrb	r3, [r7, #23]
 8000242:	2b02      	cmp	r3, #2
 8000244:	d9cb      	bls.n	80001de <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8000246:	4b27      	ldr	r3, [pc, #156]	; (80002e4 <lcdInit+0x160>)
 8000248:	222c      	movs	r2, #44	; 0x2c
 800024a:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 800024c:	4b25      	ldr	r3, [pc, #148]	; (80002e4 <lcdInit+0x160>)
 800024e:	781a      	ldrb	r2, [r3, #0]
 8000250:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <lcdInit+0x160>)
 8000252:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8000254:	4b23      	ldr	r3, [pc, #140]	; (80002e4 <lcdInit+0x160>)
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 800025a:	4b21      	ldr	r3, [pc, #132]	; (80002e0 <lcdInit+0x15c>)
 800025c:	6818      	ldr	r0, [r3, #0]
 800025e:	4b20      	ldr	r3, [pc, #128]	; (80002e0 <lcdInit+0x15c>)
 8000260:	799b      	ldrb	r3, [r3, #6]
 8000262:	b299      	uxth	r1, r3
 8000264:	2303      	movs	r3, #3
 8000266:	4a1f      	ldr	r2, [pc, #124]	; (80002e4 <lcdInit+0x160>)
 8000268:	f001 fecc 	bl	8002004 <HAL_I2C_Master_Transmit_DMA>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d004      	beq.n	800027c <lcdInit+0xf8>
        return false;
 8000272:	2300      	movs	r3, #0
 8000274:	e02f      	b.n	80002d6 <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f005 fcbc 	bl	8005bf4 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 800027c:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <lcdInit+0x15c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4618      	mov	r0, r3
 8000282:	f002 fa47 	bl	8002714 <HAL_I2C_GetState>
 8000286:	4603      	mov	r3, r0
 8000288:	2b20      	cmp	r3, #32
 800028a:	d1f4      	bne.n	8000276 <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 800028c:	7bfb      	ldrb	r3, [r7, #15]
 800028e:	f043 0302 	orr.w	r3, r3, #2
 8000292:	b2db      	uxtb	r3, r3
 8000294:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <lcdInit+0x15c>)
 8000298:	791b      	ldrb	r3, [r3, #4]
 800029a:	2b01      	cmp	r3, #1
 800029c:	d904      	bls.n	80002a8 <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	f043 0308 	orr.w	r3, r3, #8
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 80002a8:	f107 030f 	add.w	r3, r7, #15
 80002ac:	4619      	mov	r1, r3
 80002ae:	2000      	movs	r0, #0
 80002b0:	f000 f962 	bl	8000578 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 80002b4:	2101      	movs	r1, #1
 80002b6:	2001      	movs	r0, #1
 80002b8:	f000 f816 	bl	80002e8 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 80002bc:	2101      	movs	r1, #1
 80002be:	2007      	movs	r0, #7
 80002c0:	f000 f812 	bl	80002e8 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 80002c4:	2101      	movs	r1, #1
 80002c6:	2002      	movs	r0, #2
 80002c8:	f000 f80e 	bl	80002e8 <lcdCommand>
    lcdCursorHome();
 80002cc:	2101      	movs	r1, #1
 80002ce:	2005      	movs	r0, #5
 80002d0:	f000 f80a 	bl	80002e8 <lcdCommand>

    return true;
 80002d4:	2301      	movs	r3, #1
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3718      	adds	r7, #24
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000288 	.word	0x20000288
 80002e4:	20000280 	.word	0x20000280

080002e8 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	460a      	mov	r2, r1
 80002f2:	71fb      	strb	r3, [r7, #7]
 80002f4:	4613      	mov	r3, r2
 80002f6:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 80002f8:	2300      	movs	r3, #0
 80002fa:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 80002fc:	79bb      	ldrb	r3, [r7, #6]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d06e      	beq.n	80003e0 <lcdCommand+0xf8>
 8000302:	2b01      	cmp	r3, #1
 8000304:	f040 80b4 	bne.w	8000470 <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	3b01      	subs	r3, #1
 800030c:	2b07      	cmp	r3, #7
 800030e:	d864      	bhi.n	80003da <lcdCommand+0xf2>
 8000310:	a201      	add	r2, pc, #4	; (adr r2, 8000318 <lcdCommand+0x30>)
 8000312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000316:	bf00      	nop
 8000318:	08000339 	.word	0x08000339
 800031c:	08000369 	.word	0x08000369
 8000320:	08000349 	.word	0x08000349
 8000324:	08000359 	.word	0x08000359
 8000328:	0800038d 	.word	0x0800038d
 800032c:	080003c1 	.word	0x080003c1
 8000330:	080003b1 	.word	0x080003b1
 8000334:	080003cb 	.word	0x080003cb
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8000338:	4b67      	ldr	r3, [pc, #412]	; (80004d8 <lcdCommand+0x1f0>)
 800033a:	7a1b      	ldrb	r3, [r3, #8]
 800033c:	f043 0304 	orr.w	r3, r3, #4
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4b65      	ldr	r3, [pc, #404]	; (80004d8 <lcdCommand+0x1f0>)
 8000344:	721a      	strb	r2, [r3, #8]
                    break;
 8000346:	e04a      	b.n	80003de <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8000348:	4b63      	ldr	r3, [pc, #396]	; (80004d8 <lcdCommand+0x1f0>)
 800034a:	7a1b      	ldrb	r3, [r3, #8]
 800034c:	f043 0302 	orr.w	r3, r3, #2
 8000350:	b2da      	uxtb	r2, r3
 8000352:	4b61      	ldr	r3, [pc, #388]	; (80004d8 <lcdCommand+0x1f0>)
 8000354:	721a      	strb	r2, [r3, #8]
                    break;
 8000356:	e042      	b.n	80003de <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8000358:	4b5f      	ldr	r3, [pc, #380]	; (80004d8 <lcdCommand+0x1f0>)
 800035a:	7a1b      	ldrb	r3, [r3, #8]
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	b2da      	uxtb	r2, r3
 8000362:	4b5d      	ldr	r3, [pc, #372]	; (80004d8 <lcdCommand+0x1f0>)
 8000364:	721a      	strb	r2, [r3, #8]
                    break;
 8000366:	e03a      	b.n	80003de <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8000368:	2301      	movs	r3, #1
 800036a:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 800036c:	f107 030f 	add.w	r3, r7, #15
 8000370:	4619      	mov	r1, r3
 8000372:	2000      	movs	r0, #0
 8000374:	f000 f900 	bl	8000578 <lcdWriteByte>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d101      	bne.n	8000382 <lcdCommand+0x9a>
                        return false;
 800037e:	2300      	movs	r3, #0
 8000380:	e0a6      	b.n	80004d0 <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 8000382:	2002      	movs	r0, #2
 8000384:	f005 fc36 	bl	8005bf4 <vTaskDelay>
                        return true;
 8000388:	2301      	movs	r3, #1
 800038a:	e0a1      	b.n	80004d0 <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 800038c:	2302      	movs	r3, #2
 800038e:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8000390:	f107 030f 	add.w	r3, r7, #15
 8000394:	4619      	mov	r1, r3
 8000396:	2000      	movs	r0, #0
 8000398:	f000 f8ee 	bl	8000578 <lcdWriteByte>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d101      	bne.n	80003a6 <lcdCommand+0xbe>
                        return false;
 80003a2:	2300      	movs	r3, #0
 80003a4:	e094      	b.n	80004d0 <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 80003a6:	2002      	movs	r0, #2
 80003a8:	f005 fc24 	bl	8005bf4 <vTaskDelay>
                        return true;
 80003ac:	2301      	movs	r3, #1
 80003ae:	e08f      	b.n	80004d0 <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 80003b0:	4b49      	ldr	r3, [pc, #292]	; (80004d8 <lcdCommand+0x1f0>)
 80003b2:	7a5b      	ldrb	r3, [r3, #9]
 80003b4:	f043 0302 	orr.w	r3, r3, #2
 80003b8:	b2da      	uxtb	r2, r3
 80003ba:	4b47      	ldr	r3, [pc, #284]	; (80004d8 <lcdCommand+0x1f0>)
 80003bc:	725a      	strb	r2, [r3, #9]
                    break;
 80003be:	e00e      	b.n	80003de <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 80003c0:	4b45      	ldr	r3, [pc, #276]	; (80004d8 <lcdCommand+0x1f0>)
 80003c2:	7a5a      	ldrb	r2, [r3, #9]
 80003c4:	4b44      	ldr	r3, [pc, #272]	; (80004d8 <lcdCommand+0x1f0>)
 80003c6:	725a      	strb	r2, [r3, #9]
                    break;
 80003c8:	e009      	b.n	80003de <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 80003ca:	4b43      	ldr	r3, [pc, #268]	; (80004d8 <lcdCommand+0x1f0>)
 80003cc:	7a5b      	ldrb	r3, [r3, #9]
 80003ce:	f043 0301 	orr.w	r3, r3, #1
 80003d2:	b2da      	uxtb	r2, r3
 80003d4:	4b40      	ldr	r3, [pc, #256]	; (80004d8 <lcdCommand+0x1f0>)
 80003d6:	725a      	strb	r2, [r3, #9]
                    break;
 80003d8:	e001      	b.n	80003de <lcdCommand+0xf6>

                default:
                    return false;
 80003da:	2300      	movs	r3, #0
 80003dc:	e078      	b.n	80004d0 <lcdCommand+0x1e8>
            }

            break;
 80003de:	e049      	b.n	8000474 <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	2b07      	cmp	r3, #7
 80003e6:	d840      	bhi.n	800046a <lcdCommand+0x182>
 80003e8:	a201      	add	r2, pc, #4	; (adr r2, 80003f0 <lcdCommand+0x108>)
 80003ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ee:	bf00      	nop
 80003f0:	08000411 	.word	0x08000411
 80003f4:	0800046b 	.word	0x0800046b
 80003f8:	08000421 	.word	0x08000421
 80003fc:	08000431 	.word	0x08000431
 8000400:	0800046b 	.word	0x0800046b
 8000404:	08000451 	.word	0x08000451
 8000408:	08000441 	.word	0x08000441
 800040c:	0800045b 	.word	0x0800045b
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8000410:	4b31      	ldr	r3, [pc, #196]	; (80004d8 <lcdCommand+0x1f0>)
 8000412:	7a1b      	ldrb	r3, [r3, #8]
 8000414:	f023 0304 	bic.w	r3, r3, #4
 8000418:	b2da      	uxtb	r2, r3
 800041a:	4b2f      	ldr	r3, [pc, #188]	; (80004d8 <lcdCommand+0x1f0>)
 800041c:	721a      	strb	r2, [r3, #8]
                    break;
 800041e:	e026      	b.n	800046e <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8000420:	4b2d      	ldr	r3, [pc, #180]	; (80004d8 <lcdCommand+0x1f0>)
 8000422:	7a1b      	ldrb	r3, [r3, #8]
 8000424:	f023 0302 	bic.w	r3, r3, #2
 8000428:	b2da      	uxtb	r2, r3
 800042a:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <lcdCommand+0x1f0>)
 800042c:	721a      	strb	r2, [r3, #8]
                    break;
 800042e:	e01e      	b.n	800046e <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8000430:	4b29      	ldr	r3, [pc, #164]	; (80004d8 <lcdCommand+0x1f0>)
 8000432:	7a1b      	ldrb	r3, [r3, #8]
 8000434:	f023 0301 	bic.w	r3, r3, #1
 8000438:	b2da      	uxtb	r2, r3
 800043a:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <lcdCommand+0x1f0>)
 800043c:	721a      	strb	r2, [r3, #8]
                    break;
 800043e:	e016      	b.n	800046e <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8000440:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <lcdCommand+0x1f0>)
 8000442:	7a5b      	ldrb	r3, [r3, #9]
 8000444:	f023 0302 	bic.w	r3, r3, #2
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <lcdCommand+0x1f0>)
 800044c:	725a      	strb	r2, [r3, #9]
                    break;
 800044e:	e00e      	b.n	800046e <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8000450:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <lcdCommand+0x1f0>)
 8000452:	7a5a      	ldrb	r2, [r3, #9]
 8000454:	4b20      	ldr	r3, [pc, #128]	; (80004d8 <lcdCommand+0x1f0>)
 8000456:	725a      	strb	r2, [r3, #9]
                    break;
 8000458:	e009      	b.n	800046e <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 800045a:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <lcdCommand+0x1f0>)
 800045c:	7a5b      	ldrb	r3, [r3, #9]
 800045e:	f023 0301 	bic.w	r3, r3, #1
 8000462:	b2da      	uxtb	r2, r3
 8000464:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <lcdCommand+0x1f0>)
 8000466:	725a      	strb	r2, [r3, #9]
                    break;
 8000468:	e001      	b.n	800046e <lcdCommand+0x186>

                default:
                    return false;
 800046a:	2300      	movs	r3, #0
 800046c:	e030      	b.n	80004d0 <lcdCommand+0x1e8>
            }

            break;
 800046e:	e001      	b.n	8000474 <lcdCommand+0x18c>

        default:
            return false;
 8000470:	2300      	movs	r3, #0
 8000472:	e02d      	b.n	80004d0 <lcdCommand+0x1e8>
    }

    /* Now lets send the command */
    switch (command) {
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	3b01      	subs	r3, #1
 8000478:	2b07      	cmp	r3, #7
 800047a:	d821      	bhi.n	80004c0 <lcdCommand+0x1d8>
 800047c:	a201      	add	r2, pc, #4	; (adr r2, 8000484 <lcdCommand+0x19c>)
 800047e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000482:	bf00      	nop
 8000484:	080004a5 	.word	0x080004a5
 8000488:	080004c1 	.word	0x080004c1
 800048c:	080004a5 	.word	0x080004a5
 8000490:	080004a5 	.word	0x080004a5
 8000494:	080004c1 	.word	0x080004c1
 8000498:	080004b3 	.word	0x080004b3
 800049c:	080004b3 	.word	0x080004b3
 80004a0:	080004b3 	.word	0x080004b3
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <lcdCommand+0x1f0>)
 80004a6:	7a1b      	ldrb	r3, [r3, #8]
 80004a8:	f043 0308 	orr.w	r3, r3, #8
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	73fb      	strb	r3, [r7, #15]
            break;
 80004b0:	e007      	b.n	80004c2 <lcdCommand+0x1da>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <lcdCommand+0x1f0>)
 80004b4:	7a5b      	ldrb	r3, [r3, #9]
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	73fb      	strb	r3, [r7, #15]
            break;
 80004be:	e000      	b.n	80004c2 <lcdCommand+0x1da>

        default:
            break;
 80004c0:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 80004c2:	f107 030f 	add.w	r3, r7, #15
 80004c6:	4619      	mov	r1, r3
 80004c8:	2000      	movs	r0, #0
 80004ca:	f000 f855 	bl	8000578 <lcdWriteByte>
 80004ce:	4603      	mov	r3, r0
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3710      	adds	r7, #16
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000288 	.word	0x20000288

080004dc <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	4613      	mov	r3, r2
 80004ea:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <lcdSetCursorPosition+0x50>)
 80004ee:	791b      	ldrb	r3, [r3, #4]
 80004f0:	79ba      	ldrb	r2, [r7, #6]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d303      	bcc.n	80004fe <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 80004f6:	4b0d      	ldr	r3, [pc, #52]	; (800052c <lcdSetCursorPosition+0x50>)
 80004f8:	791b      	ldrb	r3, [r3, #4]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <lcdSetCursorPosition+0x54>)
 8000502:	5cd2      	ldrb	r2, [r2, r3]
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	4413      	add	r3, r2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	b25b      	sxtb	r3, r3
 800050c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000510:	b25b      	sxtb	r3, r3
 8000512:	b2db      	uxtb	r3, r3
 8000514:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 8000516:	f107 030f 	add.w	r3, r7, #15
 800051a:	4619      	mov	r1, r3
 800051c:	2000      	movs	r0, #0
 800051e:	f000 f82b 	bl	8000578 <lcdWriteByte>
 8000522:	4603      	mov	r3, r0
}
 8000524:	4618      	mov	r0, r3
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000288 	.word	0x20000288
 8000530:	08006b0c 	.word	0x08006b0c

08000534 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]
 8000544:	e00e      	b.n	8000564 <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4413      	add	r3, r2
 800054c:	4619      	mov	r1, r3
 800054e:	2001      	movs	r0, #1
 8000550:	f000 f812 	bl	8000578 <lcdWriteByte>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d101      	bne.n	800055e <lcdPrintStr+0x2a>
            return false;
 800055a:	2300      	movs	r3, #0
 800055c:	e007      	b.n	800056e <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	3301      	adds	r3, #1
 8000562:	73fb      	strb	r3, [r7, #15]
 8000564:	7bfa      	ldrb	r2, [r7, #15]
 8000566:	78fb      	ldrb	r3, [r7, #3]
 8000568:	429a      	cmp	r2, r3
 800056a:	d3ec      	bcc.n	8000546 <lcdPrintStr+0x12>
        }
    }

    return true;
 800056c:	2301      	movs	r3, #1
}
 800056e:	4618      	mov	r0, r3
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	6039      	str	r1, [r7, #0]
 8000582:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8000584:	4b33      	ldr	r3, [pc, #204]	; (8000654 <lcdWriteByte+0xdc>)
 8000586:	79da      	ldrb	r2, [r3, #7]
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	4313      	orrs	r3, r2
 800058c:	b2da      	uxtb	r2, r3
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	f023 030f 	bic.w	r3, r3, #15
 8000596:	b2db      	uxtb	r3, r3
 8000598:	4313      	orrs	r3, r2
 800059a:	b2db      	uxtb	r3, r3
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <lcdWriteByte+0xe0>)
 80005a4:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 80005a6:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <lcdWriteByte+0xe0>)
 80005a8:	781a      	ldrb	r2, [r3, #0]
 80005aa:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <lcdWriteByte+0xe0>)
 80005ac:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 80005ae:	4b29      	ldr	r3, [pc, #164]	; (8000654 <lcdWriteByte+0xdc>)
 80005b0:	79da      	ldrb	r2, [r3, #7]
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	b25a      	sxtb	r2, r3
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	f023 030f 	bic.w	r3, r3, #15
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	4313      	orrs	r3, r2
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <lcdWriteByte+0xe0>)
 80005ce:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 80005d0:	4b20      	ldr	r3, [pc, #128]	; (8000654 <lcdWriteByte+0xdc>)
 80005d2:	79da      	ldrb	r2, [r3, #7]
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	011b      	lsls	r3, r3, #4
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	4313      	orrs	r3, r2
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <lcdWriteByte+0xe0>)
 80005ee:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <lcdWriteByte+0xe0>)
 80005f2:	78da      	ldrb	r2, [r3, #3]
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <lcdWriteByte+0xe0>)
 80005f6:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <lcdWriteByte+0xdc>)
 80005fa:	79da      	ldrb	r2, [r3, #7]
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	4313      	orrs	r3, r2
 8000600:	b2db      	uxtb	r3, r3
 8000602:	b25a      	sxtb	r2, r3
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	011b      	lsls	r3, r3, #4
 800060a:	b25b      	sxtb	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b25b      	sxtb	r3, r3
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <lcdWriteByte+0xe0>)
 8000614:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <lcdWriteByte+0xdc>)
 8000618:	6818      	ldr	r0, [r3, #0]
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <lcdWriteByte+0xdc>)
 800061c:	799b      	ldrb	r3, [r3, #6]
 800061e:	b299      	uxth	r1, r3
 8000620:	2306      	movs	r3, #6
 8000622:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <lcdWriteByte+0xe0>)
 8000624:	f001 fcee 	bl	8002004 <HAL_I2C_Master_Transmit_DMA>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d004      	beq.n	8000638 <lcdWriteByte+0xc0>
        return false;
 800062e:	2300      	movs	r3, #0
 8000630:	e00b      	b.n	800064a <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8000632:	2001      	movs	r0, #1
 8000634:	f005 fade 	bl	8005bf4 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <lcdWriteByte+0xdc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f002 f869 	bl	8002714 <HAL_I2C_GetState>
 8000642:	4603      	mov	r3, r0
 8000644:	2b20      	cmp	r3, #32
 8000646:	d1f4      	bne.n	8000632 <lcdWriteByte+0xba>
    }

    return true;
 8000648:	2301      	movs	r3, #1
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000288 	.word	0x20000288
 8000658:	20000280 	.word	0x20000280

0800065c <StartDefaultTask.7210>:
  MX_USART2_UART_Init();
  MX_TIM3_Init();
  MX_I2C1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  void StartDefaultTask(void const * argument) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	f8c7 c000 	str.w	ip, [r7]
      /* USER CODE BEGIN StartDefaultTask */
      lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)2, (uint8_t)20);
 8000668:	2314      	movs	r3, #20
 800066a:	2202      	movs	r2, #2
 800066c:	2127      	movs	r1, #39	; 0x27
 800066e:	480a      	ldr	r0, [pc, #40]	; (8000698 <StartDefaultTask.7210+0x3c>)
 8000670:	f7ff fd88 	bl	8000184 <lcdInit>

      // Print text and home position 0,0
      lcdPrintStr((uint8_t*)"Hello,", 6);
 8000674:	2106      	movs	r1, #6
 8000676:	4809      	ldr	r0, [pc, #36]	; (800069c <StartDefaultTask.7210+0x40>)
 8000678:	f7ff ff5c 	bl	8000534 <lcdPrintStr>

      // Set cursor at zero position of line 3
      lcdSetCursorPosition(0, 2);
 800067c:	2102      	movs	r1, #2
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff ff2c 	bl	80004dc <lcdSetCursorPosition>

      // Print text at cursor position
      lcdPrintStr((uint8_t*)"World!", 6);
 8000684:	2106      	movs	r1, #6
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <StartDefaultTask.7210+0x44>)
 8000688:	f7ff ff54 	bl	8000534 <lcdPrintStr>

      for (;;) {
          vTaskDelay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f005 fab0 	bl	8005bf4 <vTaskDelay>
 8000694:	e7fa      	b.n	800068c <StartDefaultTask.7210+0x30>
 8000696:	bf00      	nop
 8000698:	20001030 	.word	0x20001030
 800069c:	08006ac4 	.word	0x08006ac4
 80006a0:	08006acc 	.word	0x08006acc

080006a4 <main>:
{
 80006a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006a6:	b08d      	sub	sp, #52	; 0x34
 80006a8:	af00      	add	r7, sp, #0
int main(void)
 80006aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006b0:	f107 041c 	add.w	r4, r7, #28
 80006b4:	f107 051c 	add.w	r5, r7, #28
 80006b8:	4b77      	ldr	r3, [pc, #476]	; (8000898 <main+0x1f4>)
 80006ba:	4626      	mov	r6, r4
 80006bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006be:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80006c2:	60a5      	str	r5, [r4, #8]
 80006c4:	4b75      	ldr	r3, [pc, #468]	; (800089c <main+0x1f8>)
 80006c6:	60e3      	str	r3, [r4, #12]
 80006c8:	f104 0310 	add.w	r3, r4, #16
 80006cc:	4619      	mov	r1, r3
 80006ce:	4620      	mov	r0, r4
 80006d0:	f7ff fd3e 	bl	8000150 <__clear_cache>
  HAL_Init();
 80006d4:	f000 fdb0 	bl	8001238 <HAL_Init>
  SystemClock_Config();
 80006d8:	f000 f8f4 	bl	80008c4 <SystemClock_Config>
  MX_GPIO_Init();
 80006dc:	f000 faac 	bl	8000c38 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e0:	f000 fa84 	bl	8000bec <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006e4:	f000 fa58 	bl	8000b98 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80006e8:	f000 f9e0 	bl	8000aac <MX_TIM3_Init>
  MX_I2C1_Init();
 80006ec:	f000 f930 	bl	8000950 <MX_I2C1_Init>
  MX_TIM2_Init();
 80006f0:	f000 f95c 	bl	80009ac <MX_TIM2_Init>
      /* USER CODE END StartDefaultTask */
  }



  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); /* PWM servo PC7 */
 80006f4:	2104      	movs	r1, #4
 80006f6:	486a      	ldr	r0, [pc, #424]	; (80008a0 <main+0x1fc>)
 80006f8:	f004 f826 	bl	8004748 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); /* PWM diode1 */
 80006fc:	2104      	movs	r1, #4
 80006fe:	4869      	ldr	r0, [pc, #420]	; (80008a4 <main+0x200>)
 8000700:	f004 f822 	bl	8004748 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); /* PWM diode2 */
 8000704:	2108      	movs	r1, #8
 8000706:	4867      	ldr	r0, [pc, #412]	; (80008a4 <main+0x200>)
 8000708:	f004 f81e 	bl	8004748 <HAL_TIM_PWM_Start>


  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2140      	movs	r1, #64	; 0x40
 8000710:	4865      	ldr	r0, [pc, #404]	; (80008a8 <main+0x204>)
 8000712:	f001 fb04 	bl	8001d1e <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(LUZ_GPIO_Port, LUZ_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2140      	movs	r1, #64	; 0x40
 800071a:	4864      	ldr	r0, [pc, #400]	; (80008ac <main+0x208>)
 800071c:	f001 faff 	bl	8001d1e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	4861      	ldr	r0, [pc, #388]	; (80008ac <main+0x208>)
 8000726:	f001 fafa 	bl	8001d1e <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800072a:	4b61      	ldr	r3, [pc, #388]	; (80008b0 <main+0x20c>)
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	2300      	movs	r3, #0
 800073a:	813b      	strh	r3, [r7, #8]
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800074c:	463b      	mov	r3, r7
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f004 ff53 	bl	80055fc <osThreadCreate>
 8000756:	4602      	mov	r2, r0
 8000758:	4b56      	ldr	r3, [pc, #344]	; (80008b4 <main+0x210>)
 800075a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800075c:	f004 ff47 	bl	80055ee <osKernelStart>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1000);
 8000760:	4b50      	ldr	r3, [pc, #320]	; (80008a4 <main+0x200>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000768:	63da      	str	r2, [r3, #60]	; 0x3c
	  //SILNIK KROKOWY

	  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	484f      	ldr	r0, [pc, #316]	; (80008ac <main+0x208>)
 8000770:	f001 fad5 	bl	8001d1e <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000774:	2001      	movs	r0, #1
 8000776:	f000 fdc1 	bl	80012fc <HAL_Delay>
	  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	484b      	ldr	r0, [pc, #300]	; (80008ac <main+0x208>)
 8000780:	f001 facd 	bl	8001d1e <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000788:	f000 fdb8 	bl	80012fc <HAL_Delay>
	  //lcdPrintStr((uint8_t*)"ziom", 4);



	  //WSTAW ZABEZPIECZENIE BUZZER I DIODA
	  	if(licznik>3){
 800078c:	4b4a      	ldr	r3, [pc, #296]	; (80008b8 <main+0x214>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b03      	cmp	r3, #3
 8000792:	dd26      	ble.n	80007e2 <main+0x13e>
	  		do{
	  	HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800079a:	4844      	ldr	r0, [pc, #272]	; (80008ac <main+0x208>)
 800079c:	f001 fabf 	bl	8001d1e <HAL_GPIO_WritePin>
	  	HAL_Delay(100);
 80007a0:	2064      	movs	r0, #100	; 0x64
 80007a2:	f000 fdab 	bl	80012fc <HAL_Delay>
	  	HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ac:	483f      	ldr	r0, [pc, #252]	; (80008ac <main+0x208>)
 80007ae:	f001 fab6 	bl	8001d1e <HAL_GPIO_WritePin>
	  	HAL_Delay(1000);
 80007b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b6:	f000 fda1 	bl	80012fc <HAL_Delay>
	  	licznik=0;
 80007ba:	4b3f      	ldr	r3, [pc, #252]	; (80008b8 <main+0x214>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
	  	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80007c0:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <main+0x200>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2200      	movs	r2, #0
 80007c6:	63da      	str	r2, [r3, #60]	; 0x3c
	  	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 600);
 80007c8:	4b36      	ldr	r3, [pc, #216]	; (80008a4 <main+0x200>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80007d0:	639a      	str	r2, [r3, #56]	; 0x38
	  		}while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1); //wcisniety przycisk is button pressed?
 80007d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d6:	4839      	ldr	r0, [pc, #228]	; (80008bc <main+0x218>)
 80007d8:	f001 fa8a 	bl	8001cf0 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d0d8      	beq.n	8000794 <main+0xf0>

	  	}

	  	  //czy wisnia wpadla
	  	  //if barrier broken -> signal low
		  if(HAL_GPIO_ReadPin(barrierInput_GPIO_Port, barrierInput_Pin) == 0){
 80007e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e6:	4831      	ldr	r0, [pc, #196]	; (80008ac <main+0x208>)
 80007e8:	f001 fa82 	bl	8001cf0 <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d102      	bne.n	80007f8 <main+0x154>
			  isNextStepServo = 1;
 80007f2:	4b33      	ldr	r3, [pc, #204]	; (80008c0 <main+0x21c>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
		  //  zmienna nextwycisniecie
		  }

		  //if step is right (signal low) press the servo
		  if(HAL_GPIO_ReadPin(isThisThatStep_GPIO_Port, isThisThatStep_Pin) == 0 && isNextStepServo == 0){
 80007f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007fc:	482b      	ldr	r0, [pc, #172]	; (80008ac <main+0x208>)
 80007fe:	f001 fa77 	bl	8001cf0 <HAL_GPIO_ReadPin>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d10b      	bne.n	8000820 <main+0x17c>
 8000808:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <main+0x21c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	f083 0301 	eor.w	r3, r3, #1
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d004      	beq.n	8000820 <main+0x17c>
			  licznik ++;
 8000816:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <main+0x214>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	4a26      	ldr	r2, [pc, #152]	; (80008b8 <main+0x214>)
 800081e:	6013      	str	r3, [r2, #0]
		  }

		  if(HAL_GPIO_ReadPin(isThisThatStep_GPIO_Port, isThisThatStep_Pin) == 0 && isNextStepServo == 1){
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	4821      	ldr	r0, [pc, #132]	; (80008ac <main+0x208>)
 8000826:	f001 fa63 	bl	8001cf0 <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d197      	bne.n	8000760 <main+0xbc>
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <main+0x21c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d093      	beq.n	8000760 <main+0xbc>
			//wyciskanie
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2120      	movs	r1, #32
 800083c:	481b      	ldr	r0, [pc, #108]	; (80008ac <main+0x208>)
 800083e:	f001 fa6e 	bl	8001d1e <HAL_GPIO_WritePin>
		  	HAL_Delay(100);
 8000842:	2064      	movs	r0, #100	; 0x64
 8000844:	f000 fd5a 	bl	80012fc <HAL_Delay>
		  	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2120      	movs	r1, #32
 800084c:	4817      	ldr	r0, [pc, #92]	; (80008ac <main+0x208>)
 800084e:	f001 fa66 	bl	8001d1e <HAL_GPIO_WritePin>
		  	HAL_Delay(100);
 8000852:	2064      	movs	r0, #100	; 0x64
 8000854:	f000 fd52 	bl	80012fc <HAL_Delay>

		  	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 600);
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <main+0x1fc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000860:	639a      	str	r2, [r3, #56]	; 0x38
		  	HAL_Delay(1000);
 8000862:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000866:	f000 fd49 	bl	80012fc <HAL_Delay>
		  	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2400);
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <main+0x1fc>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000872:	639a      	str	r2, [r3, #56]	; 0x38
		  	HAL_Delay(1000);
 8000874:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000878:	f000 fd40 	bl	80012fc <HAL_Delay>
		  	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 600);
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <main+0x1fc>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000884:	639a      	str	r2, [r3, #56]	; 0x38
		  	HAL_Delay(1000);
 8000886:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800088a:	f000 fd37 	bl	80012fc <HAL_Delay>

			isNextStepServo = 0;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <main+0x21c>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1000);
 8000894:	e764      	b.n	8000760 <main+0xbc>
 8000896:	bf00      	nop
 8000898:	08006ad4 	.word	0x08006ad4
 800089c:	0800065d 	.word	0x0800065d
 80008a0:	20001084 	.word	0x20001084
 80008a4:	20001110 	.word	0x20001110
 80008a8:	40010c00 	.word	0x40010c00
 80008ac:	40010800 	.word	0x40010800
 80008b0:	08006ae4 	.word	0x08006ae4
 80008b4:	20000fe8 	.word	0x20000fe8
 80008b8:	20000298 	.word	0x20000298
 80008bc:	40011000 	.word	0x40011000
 80008c0:	20000294 	.word	0x20000294

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b090      	sub	sp, #64	; 0x40
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0318 	add.w	r3, r7, #24
 80008ce:	2228      	movs	r2, #40	; 0x28
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f006 f8e2 	bl	8006a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008ea:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f4:	2301      	movs	r3, #1
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f8:	2302      	movs	r3, #2
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000900:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000902:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0318 	add.w	r3, r7, #24
 800090c:	4618      	mov	r0, r3
 800090e:	f003 fa57 	bl	8003dc0 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000918:	f000 fa20 	bl	8000d5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	230f      	movs	r3, #15
 800091e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000920:	2302      	movs	r3, #2
 8000922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2102      	movs	r1, #2
 8000936:	4618      	mov	r0, r3
 8000938:	f003 fcc2 	bl	80042c0 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000942:	f000 fa0b 	bl	8000d5c <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3740      	adds	r7, #64	; 0x40
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000956:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <MX_I2C1_Init+0x54>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_I2C1_Init+0x50>)
 800095c:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <MX_I2C1_Init+0x58>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_I2C1_Init+0x50>)
 800096e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_I2C1_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_I2C1_Init+0x50>)
 800098e:	f001 fa01 	bl	8001d94 <HAL_I2C_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000998:	f000 f9e0 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20001030 	.word	0x20001030
 80009a4:	40005400 	.word	0x40005400
 80009a8:	000186a0 	.word	0x000186a0

080009ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	; 0x38
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c0:	f107 0320 	add.w	r3, r7, #32
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
 80009d8:	615a      	str	r2, [r3, #20]
 80009da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009dc:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <MX_TIM2_Init+0xfc>)
 80009de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <MX_TIM2_Init+0xfc>)
 80009e6:	2247      	movs	r2, #71	; 0x47
 80009e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <MX_TIM2_Init+0xfc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80009f0:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <MX_TIM2_Init+0xfc>)
 80009f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f8:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <MX_TIM2_Init+0xfc>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fe:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <MX_TIM2_Init+0xfc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a04:	4828      	ldr	r0, [pc, #160]	; (8000aa8 <MX_TIM2_Init+0xfc>)
 8000a06:	f003 fdf7 	bl	80045f8 <HAL_TIM_Base_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a10:	f000 f9a4 	bl	8000d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4821      	ldr	r0, [pc, #132]	; (8000aa8 <MX_TIM2_Init+0xfc>)
 8000a22:	f004 f8f9 	bl	8004c18 <HAL_TIM_ConfigClockSource>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a2c:	f000 f996 	bl	8000d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a30:	481d      	ldr	r0, [pc, #116]	; (8000aa8 <MX_TIM2_Init+0xfc>)
 8000a32:	f003 fe30 	bl	8004696 <HAL_TIM_PWM_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a3c:	f000 f98e 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a48:	f107 0320 	add.w	r3, r7, #32
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4816      	ldr	r0, [pc, #88]	; (8000aa8 <MX_TIM2_Init+0xfc>)
 8000a50:	f004 fc6a 	bl	8005328 <HAL_TIMEx_MasterConfigSynchronization>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a5a:	f000 f97f 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5e:	2360      	movs	r3, #96	; 0x60
 8000a60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2204      	movs	r2, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <MX_TIM2_Init+0xfc>)
 8000a76:	f004 f811 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a80:	f000 f96c 	bl	8000d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2208      	movs	r2, #8
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <MX_TIM2_Init+0xfc>)
 8000a8c:	f004 f806 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000a96:	f000 f961 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a9a:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <MX_TIM2_Init+0xfc>)
 8000a9c:	f000 fa88 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000aa0:	bf00      	nop
 8000aa2:	3738      	adds	r7, #56	; 0x38
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20001110 	.word	0x20001110

08000aac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08e      	sub	sp, #56	; 0x38
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	f107 0320 	add.w	r3, r7, #32
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
 8000ad8:	615a      	str	r2, [r3, #20]
 8000ada:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000adc:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <MX_TIM3_Init+0xe4>)
 8000ade:	4a2d      	ldr	r2, [pc, #180]	; (8000b94 <MX_TIM3_Init+0xe8>)
 8000ae0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <MX_TIM3_Init+0xe4>)
 8000ae4:	2247      	movs	r2, #71	; 0x47
 8000ae6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <MX_TIM3_Init+0xe4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000aee:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <MX_TIM3_Init+0xe4>)
 8000af0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000af4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <MX_TIM3_Init+0xe4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afc:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <MX_TIM3_Init+0xe4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b02:	4823      	ldr	r0, [pc, #140]	; (8000b90 <MX_TIM3_Init+0xe4>)
 8000b04:	f003 fd78 	bl	80045f8 <HAL_TIM_Base_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b0e:	f000 f925 	bl	8000d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	481c      	ldr	r0, [pc, #112]	; (8000b90 <MX_TIM3_Init+0xe4>)
 8000b20:	f004 f87a 	bl	8004c18 <HAL_TIM_ConfigClockSource>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b2a:	f000 f917 	bl	8000d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <MX_TIM3_Init+0xe4>)
 8000b30:	f003 fdb1 	bl	8004696 <HAL_TIM_PWM_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b3a:	f000 f90f 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4810      	ldr	r0, [pc, #64]	; (8000b90 <MX_TIM3_Init+0xe4>)
 8000b4e:	f004 fbeb 	bl	8005328 <HAL_TIMEx_MasterConfigSynchronization>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b58:	f000 f900 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5c:	2360      	movs	r3, #96	; 0x60
 8000b5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2204      	movs	r2, #4
 8000b70:	4619      	mov	r1, r3
 8000b72:	4807      	ldr	r0, [pc, #28]	; (8000b90 <MX_TIM3_Init+0xe4>)
 8000b74:	f003 ff92 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b7e:	f000 f8ed 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b82:	4803      	ldr	r0, [pc, #12]	; (8000b90 <MX_TIM3_Init+0xe4>)
 8000b84:	f000 fa14 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000b88:	bf00      	nop
 8000b8a:	3738      	adds	r7, #56	; 0x38
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20001084 	.word	0x20001084
 8000b94:	40000400 	.word	0x40000400

08000b98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <MX_USART2_UART_Init+0x50>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bd0:	f004 fc1a 	bl	8005408 <HAL_UART_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bda:	f000 f8bf 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20001158 	.word	0x20001158
 8000be8:	40004400 	.word	0x40004400

08000bec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_DMA_Init+0x48>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <MX_DMA_Init+0x48>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6153      	str	r3, [r2, #20]
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <MX_DMA_Init+0x48>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2105      	movs	r1, #5
 8000c0e:	2010      	movs	r0, #16
 8000c10:	f000 fc6d 	bl	80014ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c14:	2010      	movs	r0, #16
 8000c16:	f000 fc86 	bl	8001526 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2105      	movs	r1, #5
 8000c1e:	2011      	movs	r0, #17
 8000c20:	f000 fc65 	bl	80014ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c24:	2011      	movs	r0, #17
 8000c26:	f000 fc7e 	bl	8001526 <HAL_NVIC_EnableIRQ>

}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 0310 	add.w	r3, r7, #16
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4c:	4b3e      	ldr	r3, [pc, #248]	; (8000d48 <MX_GPIO_Init+0x110>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a3d      	ldr	r2, [pc, #244]	; (8000d48 <MX_GPIO_Init+0x110>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b3b      	ldr	r3, [pc, #236]	; (8000d48 <MX_GPIO_Init+0x110>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0310 	and.w	r3, r3, #16
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c64:	4b38      	ldr	r3, [pc, #224]	; (8000d48 <MX_GPIO_Init+0x110>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a37      	ldr	r2, [pc, #220]	; (8000d48 <MX_GPIO_Init+0x110>)
 8000c6a:	f043 0320 	orr.w	r3, r3, #32
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b35      	ldr	r3, [pc, #212]	; (8000d48 <MX_GPIO_Init+0x110>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0320 	and.w	r3, r3, #32
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b32      	ldr	r3, [pc, #200]	; (8000d48 <MX_GPIO_Init+0x110>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a31      	ldr	r2, [pc, #196]	; (8000d48 <MX_GPIO_Init+0x110>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <MX_GPIO_Init+0x110>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c94:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <MX_GPIO_Init+0x110>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a2b      	ldr	r2, [pc, #172]	; (8000d48 <MX_GPIO_Init+0x110>)
 8000c9a:	f043 0308 	orr.w	r3, r3, #8
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <MX_GPIO_Init+0x110>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0308 	and.w	r3, r3, #8
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LUZ_Pin|CLK_Pin|buzzer_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8000cb2:	4826      	ldr	r0, [pc, #152]	; (8000d4c <MX_GPIO_Init+0x114>)
 8000cb4:	f001 f833 	bl	8001d1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|DIR_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2150      	movs	r1, #80	; 0x50
 8000cbc:	4824      	ldr	r0, [pc, #144]	; (8000d50 <MX_GPIO_Init+0x118>)
 8000cbe:	f001 f82e 	bl	8001d1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <MX_GPIO_Init+0x11c>)
 8000cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4820      	ldr	r0, [pc, #128]	; (8000d58 <MX_GPIO_Init+0x120>)
 8000cd8:	f000 feb0 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LUZ_Pin CLK_Pin buzzer_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LUZ_Pin|CLK_Pin|buzzer_Pin;
 8000cdc:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 8000ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4815      	ldr	r0, [pc, #84]	; (8000d4c <MX_GPIO_Init+0x114>)
 8000cf6:	f000 fea1 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : barrierInput_Pin isThisThatStep_Pin */
  GPIO_InitStruct.Pin = barrierInput_Pin|isThisThatStep_Pin;
 8000cfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480f      	ldr	r0, [pc, #60]	; (8000d4c <MX_GPIO_Init+0x114>)
 8000d10:	f000 fe94 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin DIR_Pin */
  GPIO_InitStruct.Pin = M1_Pin|DIR_Pin;
 8000d14:	2350      	movs	r3, #80	; 0x50
 8000d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4809      	ldr	r0, [pc, #36]	; (8000d50 <MX_GPIO_Init+0x118>)
 8000d2c:	f000 fe86 	bl	8001a3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2105      	movs	r1, #5
 8000d34:	2028      	movs	r0, #40	; 0x28
 8000d36:	f000 fbda 	bl	80014ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d3a:	2028      	movs	r0, #40	; 0x28
 8000d3c:	f000 fbf3 	bl	8001526 <HAL_NVIC_EnableIRQ>

}
 8000d40:	bf00      	nop
 8000d42:	3720      	adds	r7, #32
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010800 	.word	0x40010800
 8000d50:	40010c00 	.word	0x40010c00
 8000d54:	10110000 	.word	0x10110000
 8000d58:	40011000 	.word	0x40011000

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_MspInit+0x68>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <HAL_MspInit+0x68>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6193      	str	r3, [r2, #24]
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_MspInit+0x68>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_MspInit+0x68>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <HAL_MspInit+0x68>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d90:	61d3      	str	r3, [r2, #28]
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_MspInit+0x68>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	210f      	movs	r1, #15
 8000da2:	f06f 0001 	mvn.w	r0, #1
 8000da6:	f000 fba2 	bl	80014ee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_MspInit+0x6c>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_MspInit+0x6c>)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010000 	.word	0x40010000

08000dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a4b      	ldr	r2, [pc, #300]	; (8000f20 <HAL_I2C_MspInit+0x148>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	f040 808f 	bne.w	8000f18 <HAL_I2C_MspInit+0x140>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	4b4a      	ldr	r3, [pc, #296]	; (8000f24 <HAL_I2C_MspInit+0x14c>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	4a49      	ldr	r2, [pc, #292]	; (8000f24 <HAL_I2C_MspInit+0x14c>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	6193      	str	r3, [r2, #24]
 8000e06:	4b47      	ldr	r3, [pc, #284]	; (8000f24 <HAL_I2C_MspInit+0x14c>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e18:	2312      	movs	r3, #18
 8000e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4840      	ldr	r0, [pc, #256]	; (8000f28 <HAL_I2C_MspInit+0x150>)
 8000e28:	f000 fe08 	bl	8001a3c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000e2c:	4b3f      	ldr	r3, [pc, #252]	; (8000f2c <HAL_I2C_MspInit+0x154>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
 8000e42:	4a3a      	ldr	r2, [pc, #232]	; (8000f2c <HAL_I2C_MspInit+0x154>)
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e48:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <HAL_I2C_MspInit+0x14c>)
 8000e4a:	69db      	ldr	r3, [r3, #28]
 8000e4c:	4a35      	ldr	r2, [pc, #212]	; (8000f24 <HAL_I2C_MspInit+0x14c>)
 8000e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e52:	61d3      	str	r3, [r2, #28]
 8000e54:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <HAL_I2C_MspInit+0x14c>)
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000e60:	4b33      	ldr	r3, [pc, #204]	; (8000f30 <HAL_I2C_MspInit+0x158>)
 8000e62:	4a34      	ldr	r2, [pc, #208]	; (8000f34 <HAL_I2C_MspInit+0x15c>)
 8000e64:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e66:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <HAL_I2C_MspInit+0x158>)
 8000e68:	2210      	movs	r2, #16
 8000e6a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e6c:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <HAL_I2C_MspInit+0x158>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e72:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <HAL_I2C_MspInit+0x158>)
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e78:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <HAL_I2C_MspInit+0x158>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <HAL_I2C_MspInit+0x158>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000e84:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <HAL_I2C_MspInit+0x158>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e8a:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <HAL_I2C_MspInit+0x158>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000e90:	4827      	ldr	r0, [pc, #156]	; (8000f30 <HAL_I2C_MspInit+0x158>)
 8000e92:	f000 fb63 	bl	800155c <HAL_DMA_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_I2C_MspInit+0xc8>
    {
      Error_Handler();
 8000e9c:	f7ff ff5e 	bl	8000d5c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a23      	ldr	r2, [pc, #140]	; (8000f30 <HAL_I2C_MspInit+0x158>)
 8000ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea6:	4a22      	ldr	r2, [pc, #136]	; (8000f30 <HAL_I2C_MspInit+0x158>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <HAL_I2C_MspInit+0x160>)
 8000eae:	4a23      	ldr	r2, [pc, #140]	; (8000f3c <HAL_I2C_MspInit+0x164>)
 8000eb0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <HAL_I2C_MspInit+0x160>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <HAL_I2C_MspInit+0x160>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <HAL_I2C_MspInit+0x160>)
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <HAL_I2C_MspInit+0x160>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_I2C_MspInit+0x160>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_I2C_MspInit+0x160>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_I2C_MspInit+0x160>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000edc:	4816      	ldr	r0, [pc, #88]	; (8000f38 <HAL_I2C_MspInit+0x160>)
 8000ede:	f000 fb3d 	bl	800155c <HAL_DMA_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <HAL_I2C_MspInit+0x114>
    {
      Error_Handler();
 8000ee8:	f7ff ff38 	bl	8000d5c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <HAL_I2C_MspInit+0x160>)
 8000ef0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ef2:	4a11      	ldr	r2, [pc, #68]	; (8000f38 <HAL_I2C_MspInit+0x160>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2105      	movs	r1, #5
 8000efc:	201f      	movs	r0, #31
 8000efe:	f000 faf6 	bl	80014ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f02:	201f      	movs	r0, #31
 8000f04:	f000 fb0f 	bl	8001526 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2105      	movs	r1, #5
 8000f0c:	2020      	movs	r0, #32
 8000f0e:	f000 faee 	bl	80014ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f12:	2020      	movs	r0, #32
 8000f14:	f000 fb07 	bl	8001526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	; 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40005400 	.word	0x40005400
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010c00 	.word	0x40010c00
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	20000fec 	.word	0x20000fec
 8000f34:	4002006c 	.word	0x4002006c
 8000f38:	200010cc 	.word	0x200010cc
 8000f3c:	40020080 	.word	0x40020080

08000f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f50:	d10c      	bne.n	8000f6c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_TIM_Base_MspInit+0x68>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <HAL_TIM_Base_MspInit+0x68>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_TIM_Base_MspInit+0x68>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f6a:	e018      	b.n	8000f9e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <HAL_TIM_Base_MspInit+0x6c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d113      	bne.n	8000f9e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_TIM_Base_MspInit+0x68>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <HAL_TIM_Base_MspInit+0x68>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_TIM_Base_MspInit+0x68>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2105      	movs	r1, #5
 8000f92:	201d      	movs	r0, #29
 8000f94:	f000 faab 	bl	80014ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f98:	201d      	movs	r0, #29
 8000f9a:	f000 fac4 	bl	8001526 <HAL_NVIC_EnableIRQ>
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40000400 	.word	0x40000400

08000fb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fce:	d12b      	bne.n	8001028 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <HAL_TIM_MspPostInit+0xe0>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a2e      	ldr	r2, [pc, #184]	; (8001090 <HAL_TIM_MspPostInit+0xe0>)
 8000fd6:	f043 0308 	orr.w	r3, r3, #8
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <HAL_TIM_MspPostInit+0xe0>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = diode2_Pin|GPIO_PIN_3;
 8000fe8:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8000fec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4825      	ldr	r0, [pc, #148]	; (8001094 <HAL_TIM_MspPostInit+0xe4>)
 8000ffe:	f000 fd1d 	bl	8001a3c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8001002:	4b25      	ldr	r3, [pc, #148]	; (8001098 <HAL_TIM_MspPostInit+0xe8>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	623b      	str	r3, [r7, #32]
 8001008:	6a3b      	ldr	r3, [r7, #32]
 800100a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800100e:	623b      	str	r3, [r7, #32]
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001016:	623b      	str	r3, [r7, #32]
 8001018:	6a3b      	ldr	r3, [r7, #32]
 800101a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800101e:	623b      	str	r3, [r7, #32]
 8001020:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <HAL_TIM_MspPostInit+0xe8>)
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001026:	e02e      	b.n	8001086 <HAL_TIM_MspPostInit+0xd6>
  else if(htim->Instance==TIM3)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a1b      	ldr	r2, [pc, #108]	; (800109c <HAL_TIM_MspPostInit+0xec>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d129      	bne.n	8001086 <HAL_TIM_MspPostInit+0xd6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_TIM_MspPostInit+0xe0>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a16      	ldr	r2, [pc, #88]	; (8001090 <HAL_TIM_MspPostInit+0xe0>)
 8001038:	f043 0310 	orr.w	r3, r3, #16
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <HAL_TIM_MspPostInit+0xe0>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = servo_Pin;
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2302      	movs	r3, #2
 8001054:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(servo_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	4619      	mov	r1, r3
 800105c:	4810      	ldr	r0, [pc, #64]	; (80010a0 <HAL_TIM_MspPostInit+0xf0>)
 800105e:	f000 fced 	bl	8001a3c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <HAL_TIM_MspPostInit+0xe8>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
 8001080:	4a05      	ldr	r2, [pc, #20]	; (8001098 <HAL_TIM_MspPostInit+0xe8>)
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	6053      	str	r3, [r2, #4]
}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000
 8001094:	40010c00 	.word	0x40010c00
 8001098:	40010000 	.word	0x40010000
 800109c:	40000400 	.word	0x40000400
 80010a0:	40011000 	.word	0x40011000

080010a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a15      	ldr	r2, [pc, #84]	; (8001114 <HAL_UART_MspInit+0x70>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d123      	bne.n	800110c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <HAL_UART_MspInit+0x74>)
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	4a13      	ldr	r2, [pc, #76]	; (8001118 <HAL_UART_MspInit+0x74>)
 80010ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ce:	61d3      	str	r3, [r2, #28]
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HAL_UART_MspInit+0x74>)
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_UART_MspInit+0x74>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <HAL_UART_MspInit+0x74>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_UART_MspInit+0x74>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010f4:	230c      	movs	r3, #12
 80010f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4619      	mov	r1, r3
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_UART_MspInit+0x78>)
 8001108:	f000 fc98 	bl	8001a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40004400 	.word	0x40004400
 8001118:	40021000 	.word	0x40021000
 800111c:	40010800 	.word	0x40010800

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <HardFault_Handler+0x4>

08001132 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <MemManage_Handler+0x4>

08001138 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <BusFault_Handler+0x4>

0800113e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <UsageFault_Handler+0x4>

08001144 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f000 f8b6 	bl	80012c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001158:	f005 f882 	bl	8006260 <xTaskGetSchedulerState>
 800115c:	4603      	mov	r3, r0
 800115e:	2b01      	cmp	r3, #1
 8001160:	d001      	beq.n	8001166 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001162:	f005 fa61 	bl	8006628 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <DMA1_Channel6_IRQHandler+0x10>)
 8001172:	f000 fb23 	bl	80017bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000fec 	.word	0x20000fec

08001180 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <DMA1_Channel7_IRQHandler+0x10>)
 8001186:	f000 fb19 	bl	80017bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200010cc 	.word	0x200010cc

08001194 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <TIM3_IRQHandler+0x10>)
 800119a:	f003 fb77 	bl	800488c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20001084 	.word	0x20001084

080011a8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <I2C1_EV_IRQHandler+0x10>)
 80011ae:	f001 f837 	bl	8002220 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20001030 	.word	0x20001030

080011bc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <I2C1_ER_IRQHandler+0x10>)
 80011c2:	f001 f99a 	bl	80024fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20001030 	.word	0x20001030

080011d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011d8:	f000 fdba 	bl	8001d50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011ee:	e003      	b.n	80011f8 <LoopCopyDataInit>

080011f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80011f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011f6:	3104      	adds	r1, #4

080011f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011f8:	480a      	ldr	r0, [pc, #40]	; (8001224 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80011fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001200:	d3f6      	bcc.n	80011f0 <CopyDataInit>
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001204:	e002      	b.n	800120c <LoopFillZerobss>

08001206 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001208:	f842 3b04 	str.w	r3, [r2], #4

0800120c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800120e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001210:	d3f9      	bcc.n	8001206 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001212:	f7ff ffe5 	bl	80011e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001216:	f005 fc1d 	bl	8006a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800121a:	f7ff fa43 	bl	80006a4 <main>
  bx lr
 800121e:	4770      	bx	lr
  ldr r3, =_sidata
 8001220:	08006b30 	.word	0x08006b30
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001228:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 800122c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001230:	2000119c 	.word	0x2000119c

08001234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC1_2_IRQHandler>
	...

08001238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_Init+0x28>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_Init+0x28>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f945 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	200f      	movs	r0, #15
 8001250:	f000 f808 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fd88 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40022000 	.word	0x40022000

08001264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f95d 	bl	8001542 <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 f925 	bl	80014ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_IncTick+0x1c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_IncTick+0x20>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a03      	ldr	r2, [pc, #12]	; (80012e4 <HAL_IncTick+0x20>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20001198 	.word	0x20001198

080012e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <HAL_GetTick+0x10>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20001198 	.word	0x20001198

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff fff0 	bl	80012e8 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_Delay+0x40>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffe0 	bl	80012e8 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000008 	.word	0x20000008

08001340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db0b      	blt.n	80013ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	f003 021f 	and.w	r2, r3, #31
 80013bc:	4906      	ldr	r1, [pc, #24]	; (80013d8 <__NVIC_EnableIRQ+0x34>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	2001      	movs	r0, #1
 80013c6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	; (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	; (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f1c3 0307 	rsb	r3, r3, #7
 800144a:	2b04      	cmp	r3, #4
 800144c:	bf28      	it	cs
 800144e:	2304      	movcs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	2b06      	cmp	r3, #6
 8001458:	d902      	bls.n	8001460 <NVIC_EncodePriority+0x30>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b03      	subs	r3, #3
 800145e:	e000      	b.n	8001462 <NVIC_EncodePriority+0x32>
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	f04f 32ff 	mov.w	r2, #4294967295
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001478:	f04f 31ff 	mov.w	r1, #4294967295
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43d9      	mvns	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	4313      	orrs	r3, r2
         );
}
 800148a:	4618      	mov	r0, r3
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a4:	d301      	bcc.n	80014aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00f      	b.n	80014ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <SysTick_Config+0x40>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b2:	210f      	movs	r1, #15
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f7ff ff90 	bl	80013dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <SysTick_Config+0x40>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <SysTick_Config+0x40>)
 80014c4:	2207      	movs	r2, #7
 80014c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff2d 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001500:	f7ff ff42 	bl	8001388 <__NVIC_GetPriorityGrouping>
 8001504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	6978      	ldr	r0, [r7, #20]
 800150c:	f7ff ff90 	bl	8001430 <NVIC_EncodePriority>
 8001510:	4602      	mov	r2, r0
 8001512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff5f 	bl	80013dc <__NVIC_SetPriority>
}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff35 	bl	80013a4 <__NVIC_EnableIRQ>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ffa2 	bl	8001494 <SysTick_Config>
 8001550:	4603      	mov	r3, r0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e043      	b.n	80015fa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <HAL_DMA_Init+0xa8>)
 800157a:	4413      	add	r3, r2
 800157c:	4a22      	ldr	r2, [pc, #136]	; (8001608 <HAL_DMA_Init+0xac>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	091b      	lsrs	r3, r3, #4
 8001584:	009a      	lsls	r2, r3, #2
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a1f      	ldr	r2, [pc, #124]	; (800160c <HAL_DMA_Init+0xb0>)
 800158e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2202      	movs	r2, #2
 8001594:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	bffdfff8 	.word	0xbffdfff8
 8001608:	cccccccd 	.word	0xcccccccd
 800160c:	40020000 	.word	0x40020000

08001610 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_DMA_Start_IT+0x20>
 800162c:	2302      	movs	r3, #2
 800162e:	e04a      	b.n	80016c6 <HAL_DMA_Start_IT+0xb6>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800163e:	2b01      	cmp	r3, #1
 8001640:	d13a      	bne.n	80016b8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2202      	movs	r2, #2
 8001646:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0201 	bic.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 f9ba 	bl	80019e0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 020e 	orr.w	r2, r2, #14
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	e00f      	b.n	80016a6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0204 	bic.w	r2, r2, #4
 8001694:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 020a 	orr.w	r2, r2, #10
 80016a4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f042 0201 	orr.w	r2, r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e005      	b.n	80016c4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016c0:	2302      	movs	r3, #2
 80016c2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d005      	beq.n	80016f2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2204      	movs	r2, #4
 80016ea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e051      	b.n	8001796 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 020e 	bic.w	r2, r2, #14
 8001700:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <HAL_DMA_Abort_IT+0xd0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d029      	beq.n	8001770 <HAL_DMA_Abort_IT+0xa0>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a20      	ldr	r2, [pc, #128]	; (80017a4 <HAL_DMA_Abort_IT+0xd4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d022      	beq.n	800176c <HAL_DMA_Abort_IT+0x9c>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <HAL_DMA_Abort_IT+0xd8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d01a      	beq.n	8001766 <HAL_DMA_Abort_IT+0x96>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_DMA_Abort_IT+0xdc>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d012      	beq.n	8001760 <HAL_DMA_Abort_IT+0x90>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a1c      	ldr	r2, [pc, #112]	; (80017b0 <HAL_DMA_Abort_IT+0xe0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d00a      	beq.n	800175a <HAL_DMA_Abort_IT+0x8a>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1a      	ldr	r2, [pc, #104]	; (80017b4 <HAL_DMA_Abort_IT+0xe4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d102      	bne.n	8001754 <HAL_DMA_Abort_IT+0x84>
 800174e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001752:	e00e      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 8001754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001758:	e00b      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 800175a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175e:	e008      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 8001760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001764:	e005      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 8001766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800176a:	e002      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 800176c:	2310      	movs	r3, #16
 800176e:	e000      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 8001770:	2301      	movs	r3, #1
 8001772:	4a11      	ldr	r2, [pc, #68]	; (80017b8 <HAL_DMA_Abort_IT+0xe8>)
 8001774:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	4798      	blx	r3
    } 
  }
  return status;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40020008 	.word	0x40020008
 80017a4:	4002001c 	.word	0x4002001c
 80017a8:	40020030 	.word	0x40020030
 80017ac:	40020044 	.word	0x40020044
 80017b0:	40020058 	.word	0x40020058
 80017b4:	4002006c 	.word	0x4002006c
 80017b8:	40020000 	.word	0x40020000

080017bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	2204      	movs	r2, #4
 80017da:	409a      	lsls	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4013      	ands	r3, r2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d04f      	beq.n	8001884 <HAL_DMA_IRQHandler+0xc8>
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d04a      	beq.n	8001884 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0320 	and.w	r3, r3, #32
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d107      	bne.n	800180c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0204 	bic.w	r2, r2, #4
 800180a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a66      	ldr	r2, [pc, #408]	; (80019ac <HAL_DMA_IRQHandler+0x1f0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d029      	beq.n	800186a <HAL_DMA_IRQHandler+0xae>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a65      	ldr	r2, [pc, #404]	; (80019b0 <HAL_DMA_IRQHandler+0x1f4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d022      	beq.n	8001866 <HAL_DMA_IRQHandler+0xaa>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a63      	ldr	r2, [pc, #396]	; (80019b4 <HAL_DMA_IRQHandler+0x1f8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d01a      	beq.n	8001860 <HAL_DMA_IRQHandler+0xa4>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a62      	ldr	r2, [pc, #392]	; (80019b8 <HAL_DMA_IRQHandler+0x1fc>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d012      	beq.n	800185a <HAL_DMA_IRQHandler+0x9e>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a60      	ldr	r2, [pc, #384]	; (80019bc <HAL_DMA_IRQHandler+0x200>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d00a      	beq.n	8001854 <HAL_DMA_IRQHandler+0x98>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a5f      	ldr	r2, [pc, #380]	; (80019c0 <HAL_DMA_IRQHandler+0x204>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d102      	bne.n	800184e <HAL_DMA_IRQHandler+0x92>
 8001848:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800184c:	e00e      	b.n	800186c <HAL_DMA_IRQHandler+0xb0>
 800184e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001852:	e00b      	b.n	800186c <HAL_DMA_IRQHandler+0xb0>
 8001854:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001858:	e008      	b.n	800186c <HAL_DMA_IRQHandler+0xb0>
 800185a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800185e:	e005      	b.n	800186c <HAL_DMA_IRQHandler+0xb0>
 8001860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001864:	e002      	b.n	800186c <HAL_DMA_IRQHandler+0xb0>
 8001866:	2340      	movs	r3, #64	; 0x40
 8001868:	e000      	b.n	800186c <HAL_DMA_IRQHandler+0xb0>
 800186a:	2304      	movs	r3, #4
 800186c:	4a55      	ldr	r2, [pc, #340]	; (80019c4 <HAL_DMA_IRQHandler+0x208>)
 800186e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 8094 	beq.w	80019a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001882:	e08e      	b.n	80019a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	2202      	movs	r2, #2
 800188a:	409a      	lsls	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4013      	ands	r3, r2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d056      	beq.n	8001942 <HAL_DMA_IRQHandler+0x186>
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d051      	beq.n	8001942 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0320 	and.w	r3, r3, #32
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10b      	bne.n	80018c4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 020a 	bic.w	r2, r2, #10
 80018ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a38      	ldr	r2, [pc, #224]	; (80019ac <HAL_DMA_IRQHandler+0x1f0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d029      	beq.n	8001922 <HAL_DMA_IRQHandler+0x166>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a37      	ldr	r2, [pc, #220]	; (80019b0 <HAL_DMA_IRQHandler+0x1f4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d022      	beq.n	800191e <HAL_DMA_IRQHandler+0x162>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a35      	ldr	r2, [pc, #212]	; (80019b4 <HAL_DMA_IRQHandler+0x1f8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d01a      	beq.n	8001918 <HAL_DMA_IRQHandler+0x15c>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a34      	ldr	r2, [pc, #208]	; (80019b8 <HAL_DMA_IRQHandler+0x1fc>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d012      	beq.n	8001912 <HAL_DMA_IRQHandler+0x156>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a32      	ldr	r2, [pc, #200]	; (80019bc <HAL_DMA_IRQHandler+0x200>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00a      	beq.n	800190c <HAL_DMA_IRQHandler+0x150>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a31      	ldr	r2, [pc, #196]	; (80019c0 <HAL_DMA_IRQHandler+0x204>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d102      	bne.n	8001906 <HAL_DMA_IRQHandler+0x14a>
 8001900:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001904:	e00e      	b.n	8001924 <HAL_DMA_IRQHandler+0x168>
 8001906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800190a:	e00b      	b.n	8001924 <HAL_DMA_IRQHandler+0x168>
 800190c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001910:	e008      	b.n	8001924 <HAL_DMA_IRQHandler+0x168>
 8001912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001916:	e005      	b.n	8001924 <HAL_DMA_IRQHandler+0x168>
 8001918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800191c:	e002      	b.n	8001924 <HAL_DMA_IRQHandler+0x168>
 800191e:	2320      	movs	r3, #32
 8001920:	e000      	b.n	8001924 <HAL_DMA_IRQHandler+0x168>
 8001922:	2302      	movs	r3, #2
 8001924:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <HAL_DMA_IRQHandler+0x208>)
 8001926:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	2b00      	cmp	r3, #0
 8001936:	d034      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001940:	e02f      	b.n	80019a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	2208      	movs	r2, #8
 8001948:	409a      	lsls	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d028      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x1e8>
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	2b00      	cmp	r3, #0
 800195a:	d023      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 020e 	bic.w	r2, r2, #14
 800196a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001974:	2101      	movs	r1, #1
 8001976:	fa01 f202 	lsl.w	r2, r1, r2
 800197a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	4798      	blx	r3
    }
  }
  return;
 80019a2:	bf00      	nop
 80019a4:	bf00      	nop
}
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40020008 	.word	0x40020008
 80019b0:	4002001c 	.word	0x4002001c
 80019b4:	40020030 	.word	0x40020030
 80019b8:	40020044 	.word	0x40020044
 80019bc:	40020058 	.word	0x40020058
 80019c0:	4002006c 	.word	0x4002006c
 80019c4:	40020000 	.word	0x40020000

080019c8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f6:	2101      	movs	r1, #1
 80019f8:	fa01 f202 	lsl.w	r2, r1, r2
 80019fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d108      	bne.n	8001a20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a1e:	e007      	b.n	8001a30 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	60da      	str	r2, [r3, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b08b      	sub	sp, #44	; 0x2c
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4e:	e127      	b.n	8001ca0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a50:	2201      	movs	r2, #1
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	f040 8116 	bne.w	8001c9a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b12      	cmp	r3, #18
 8001a74:	d034      	beq.n	8001ae0 <HAL_GPIO_Init+0xa4>
 8001a76:	2b12      	cmp	r3, #18
 8001a78:	d80d      	bhi.n	8001a96 <HAL_GPIO_Init+0x5a>
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d02b      	beq.n	8001ad6 <HAL_GPIO_Init+0x9a>
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d804      	bhi.n	8001a8c <HAL_GPIO_Init+0x50>
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d031      	beq.n	8001aea <HAL_GPIO_Init+0xae>
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d01c      	beq.n	8001ac4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a8a:	e048      	b.n	8001b1e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d043      	beq.n	8001b18 <HAL_GPIO_Init+0xdc>
 8001a90:	2b11      	cmp	r3, #17
 8001a92:	d01b      	beq.n	8001acc <HAL_GPIO_Init+0x90>
          break;
 8001a94:	e043      	b.n	8001b1e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a96:	4a89      	ldr	r2, [pc, #548]	; (8001cbc <HAL_GPIO_Init+0x280>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d026      	beq.n	8001aea <HAL_GPIO_Init+0xae>
 8001a9c:	4a87      	ldr	r2, [pc, #540]	; (8001cbc <HAL_GPIO_Init+0x280>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d806      	bhi.n	8001ab0 <HAL_GPIO_Init+0x74>
 8001aa2:	4a87      	ldr	r2, [pc, #540]	; (8001cc0 <HAL_GPIO_Init+0x284>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d020      	beq.n	8001aea <HAL_GPIO_Init+0xae>
 8001aa8:	4a86      	ldr	r2, [pc, #536]	; (8001cc4 <HAL_GPIO_Init+0x288>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d01d      	beq.n	8001aea <HAL_GPIO_Init+0xae>
          break;
 8001aae:	e036      	b.n	8001b1e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ab0:	4a85      	ldr	r2, [pc, #532]	; (8001cc8 <HAL_GPIO_Init+0x28c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d019      	beq.n	8001aea <HAL_GPIO_Init+0xae>
 8001ab6:	4a85      	ldr	r2, [pc, #532]	; (8001ccc <HAL_GPIO_Init+0x290>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d016      	beq.n	8001aea <HAL_GPIO_Init+0xae>
 8001abc:	4a84      	ldr	r2, [pc, #528]	; (8001cd0 <HAL_GPIO_Init+0x294>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0xae>
          break;
 8001ac2:	e02c      	b.n	8001b1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	623b      	str	r3, [r7, #32]
          break;
 8001aca:	e028      	b.n	8001b1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	623b      	str	r3, [r7, #32]
          break;
 8001ad4:	e023      	b.n	8001b1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	3308      	adds	r3, #8
 8001adc:	623b      	str	r3, [r7, #32]
          break;
 8001ade:	e01e      	b.n	8001b1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	330c      	adds	r3, #12
 8001ae6:	623b      	str	r3, [r7, #32]
          break;
 8001ae8:	e019      	b.n	8001b1e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d102      	bne.n	8001af8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001af2:	2304      	movs	r3, #4
 8001af4:	623b      	str	r3, [r7, #32]
          break;
 8001af6:	e012      	b.n	8001b1e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d105      	bne.n	8001b0c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b00:	2308      	movs	r3, #8
 8001b02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	611a      	str	r2, [r3, #16]
          break;
 8001b0a:	e008      	b.n	8001b1e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	615a      	str	r2, [r3, #20]
          break;
 8001b16:	e002      	b.n	8001b1e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
          break;
 8001b1c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	2bff      	cmp	r3, #255	; 0xff
 8001b22:	d801      	bhi.n	8001b28 <HAL_GPIO_Init+0xec>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	e001      	b.n	8001b2c <HAL_GPIO_Init+0xf0>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2bff      	cmp	r3, #255	; 0xff
 8001b32:	d802      	bhi.n	8001b3a <HAL_GPIO_Init+0xfe>
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	e002      	b.n	8001b40 <HAL_GPIO_Init+0x104>
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	3b08      	subs	r3, #8
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	210f      	movs	r1, #15
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	401a      	ands	r2, r3
 8001b52:	6a39      	ldr	r1, [r7, #32]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 8096 	beq.w	8001c9a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b6e:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <HAL_GPIO_Init+0x298>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	4a58      	ldr	r2, [pc, #352]	; (8001cd4 <HAL_GPIO_Init+0x298>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6193      	str	r3, [r2, #24]
 8001b7a:	4b56      	ldr	r3, [pc, #344]	; (8001cd4 <HAL_GPIO_Init+0x298>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b86:	4a54      	ldr	r2, [pc, #336]	; (8001cd8 <HAL_GPIO_Init+0x29c>)
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b92:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4b      	ldr	r2, [pc, #300]	; (8001cdc <HAL_GPIO_Init+0x2a0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d013      	beq.n	8001bda <HAL_GPIO_Init+0x19e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4a      	ldr	r2, [pc, #296]	; (8001ce0 <HAL_GPIO_Init+0x2a4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00d      	beq.n	8001bd6 <HAL_GPIO_Init+0x19a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a49      	ldr	r2, [pc, #292]	; (8001ce4 <HAL_GPIO_Init+0x2a8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d007      	beq.n	8001bd2 <HAL_GPIO_Init+0x196>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a48      	ldr	r2, [pc, #288]	; (8001ce8 <HAL_GPIO_Init+0x2ac>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d101      	bne.n	8001bce <HAL_GPIO_Init+0x192>
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x1a0>
 8001bce:	2304      	movs	r3, #4
 8001bd0:	e004      	b.n	8001bdc <HAL_GPIO_Init+0x1a0>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_Init+0x1a0>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_GPIO_Init+0x1a0>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bde:	f002 0203 	and.w	r2, r2, #3
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	4093      	lsls	r3, r2
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bec:	493a      	ldr	r1, [pc, #232]	; (8001cd8 <HAL_GPIO_Init+0x29c>)
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d006      	beq.n	8001c14 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c06:	4b39      	ldr	r3, [pc, #228]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4938      	ldr	r1, [pc, #224]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
 8001c12:	e006      	b.n	8001c22 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c14:	4b35      	ldr	r3, [pc, #212]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	4933      	ldr	r1, [pc, #204]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c2e:	4b2f      	ldr	r3, [pc, #188]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	492e      	ldr	r1, [pc, #184]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
 8001c3a:	e006      	b.n	8001c4a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	4929      	ldr	r1, [pc, #164]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d006      	beq.n	8001c64 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c56:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	4924      	ldr	r1, [pc, #144]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
 8001c62:	e006      	b.n	8001c72 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	491f      	ldr	r1, [pc, #124]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d006      	beq.n	8001c8c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	491a      	ldr	r1, [pc, #104]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60cb      	str	r3, [r1, #12]
 8001c8a:	e006      	b.n	8001c9a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	4915      	ldr	r1, [pc, #84]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f47f aed0 	bne.w	8001a50 <HAL_GPIO_Init+0x14>
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	372c      	adds	r7, #44	; 0x2c
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	10210000 	.word	0x10210000
 8001cc0:	10110000 	.word	0x10110000
 8001cc4:	10120000 	.word	0x10120000
 8001cc8:	10310000 	.word	0x10310000
 8001ccc:	10320000 	.word	0x10320000
 8001cd0:	10220000 	.word	0x10220000
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	40010800 	.word	0x40010800
 8001ce0:	40010c00 	.word	0x40010c00
 8001ce4:	40011000 	.word	0x40011000
 8001ce8:	40011400 	.word	0x40011400
 8001cec:	40010400 	.word	0x40010400

08001cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e001      	b.n	8001d12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	807b      	strh	r3, [r7, #2]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d2e:	787b      	ldrb	r3, [r7, #1]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d34:	887a      	ldrh	r2, [r7, #2]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d3a:	e003      	b.n	8001d44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d3c:	887b      	ldrh	r3, [r7, #2]
 8001d3e:	041a      	lsls	r2, r3, #16
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	611a      	str	r2, [r3, #16]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
	...

08001d50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d006      	beq.n	8001d74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f806 	bl	8001d80 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40010400 	.word	0x40010400

08001d80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e11f      	b.n	8001fe6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff f80c 	bl	8000dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2224      	movs	r2, #36	; 0x24
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001df8:	f002 fbb8 	bl	800456c <HAL_RCC_GetPCLK1Freq>
 8001dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4a7b      	ldr	r2, [pc, #492]	; (8001ff0 <HAL_I2C_Init+0x25c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d807      	bhi.n	8001e18 <HAL_I2C_Init+0x84>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4a7a      	ldr	r2, [pc, #488]	; (8001ff4 <HAL_I2C_Init+0x260>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	bf94      	ite	ls
 8001e10:	2301      	movls	r3, #1
 8001e12:	2300      	movhi	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	e006      	b.n	8001e26 <HAL_I2C_Init+0x92>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a77      	ldr	r2, [pc, #476]	; (8001ff8 <HAL_I2C_Init+0x264>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	bf94      	ite	ls
 8001e20:	2301      	movls	r3, #1
 8001e22:	2300      	movhi	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0db      	b.n	8001fe6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4a72      	ldr	r2, [pc, #456]	; (8001ffc <HAL_I2C_Init+0x268>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	0c9b      	lsrs	r3, r3, #18
 8001e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a64      	ldr	r2, [pc, #400]	; (8001ff0 <HAL_I2C_Init+0x25c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d802      	bhi.n	8001e68 <HAL_I2C_Init+0xd4>
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3301      	adds	r3, #1
 8001e66:	e009      	b.n	8001e7c <HAL_I2C_Init+0xe8>
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	4a63      	ldr	r2, [pc, #396]	; (8002000 <HAL_I2C_Init+0x26c>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	099b      	lsrs	r3, r3, #6
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	430b      	orrs	r3, r1
 8001e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4956      	ldr	r1, [pc, #344]	; (8001ff0 <HAL_I2C_Init+0x25c>)
 8001e98:	428b      	cmp	r3, r1
 8001e9a:	d80d      	bhi.n	8001eb8 <HAL_I2C_Init+0x124>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1e59      	subs	r1, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	bf38      	it	cc
 8001eb4:	2304      	movcc	r3, #4
 8001eb6:	e04f      	b.n	8001f58 <HAL_I2C_Init+0x1c4>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d111      	bne.n	8001ee4 <HAL_I2C_Init+0x150>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1e58      	subs	r0, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	440b      	add	r3, r1
 8001ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	e012      	b.n	8001f0a <HAL_I2C_Init+0x176>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1e58      	subs	r0, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6859      	ldr	r1, [r3, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	0099      	lsls	r1, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_I2C_Init+0x17e>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e022      	b.n	8001f58 <HAL_I2C_Init+0x1c4>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10e      	bne.n	8001f38 <HAL_I2C_Init+0x1a4>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1e58      	subs	r0, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6859      	ldr	r1, [r3, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	440b      	add	r3, r1
 8001f28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f36:	e00f      	b.n	8001f58 <HAL_I2C_Init+0x1c4>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1e58      	subs	r0, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	0099      	lsls	r1, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	6809      	ldr	r1, [r1, #0]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6911      	ldr	r1, [r2, #16]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68d2      	ldr	r2, [r2, #12]
 8001f92:	4311      	orrs	r1, r2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	000186a0 	.word	0x000186a0
 8001ff4:	001e847f 	.word	0x001e847f
 8001ff8:	003d08ff 	.word	0x003d08ff
 8001ffc:	431bde83 	.word	0x431bde83
 8002000:	10624dd3 	.word	0x10624dd3

08002004 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	461a      	mov	r2, r3
 8002010:	460b      	mov	r3, r1
 8002012:	817b      	strh	r3, [r7, #10]
 8002014:	4613      	mov	r3, r2
 8002016:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b20      	cmp	r3, #32
 8002026:	f040 80ec 	bne.w	8002202 <HAL_I2C_Master_Transmit_DMA+0x1fe>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800202a:	4b78      	ldr	r3, [pc, #480]	; (800220c <HAL_I2C_Master_Transmit_DMA+0x208>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	08db      	lsrs	r3, r3, #3
 8002030:	4a77      	ldr	r2, [pc, #476]	; (8002210 <HAL_I2C_Master_Transmit_DMA+0x20c>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	0a1a      	lsrs	r2, r3, #8
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	009a      	lsls	r2, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	3b01      	subs	r3, #1
 8002048:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d116      	bne.n	800207e <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2220      	movs	r2, #32
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f043 0220 	orr.w	r2, r3, #32
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0c2      	b.n	8002204 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b02      	cmp	r3, #2
 800208a:	d0db      	beq.n	8002044 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_I2C_Master_Transmit_DMA+0x96>
 8002096:	2302      	movs	r3, #2
 8002098:	e0b4      	b.n	8002204 <HAL_I2C_Master_Transmit_DMA+0x200>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d007      	beq.n	80020c0 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2221      	movs	r2, #33	; 0x21
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2210      	movs	r2, #16
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	893a      	ldrh	r2, [r7, #8]
 80020f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4a45      	ldr	r2, [pc, #276]	; (8002214 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8002100:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002102:	897a      	ldrh	r2, [r7, #10]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	2b00      	cmp	r3, #0
 800210e:	d05a      	beq.n	80021c6 <HAL_I2C_Master_Transmit_DMA+0x1c2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002114:	4a40      	ldr	r2, [pc, #256]	; (8002218 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8002116:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211c:	4a3f      	ldr	r2, [pc, #252]	; (800221c <HAL_I2C_Master_Transmit_DMA+0x218>)
 800211e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002124:	2200      	movs	r2, #0
 8002126:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212c:	2200      	movs	r2, #0
 800212e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	4619      	mov	r1, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	3310      	adds	r3, #16
 8002140:	461a      	mov	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002146:	f7ff fa63 	bl	8001610 <HAL_DMA_Start_IT>
 800214a:	4603      	mov	r3, r0
 800214c:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d124      	bne.n	800219e <HAL_I2C_Master_Transmit_DMA+0x19a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002162:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002172:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800218a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	e02f      	b.n	80021fe <HAL_I2C_Master_Transmit_DMA+0x1fa>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f043 0210 	orr.w	r2, r3, #16
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e01e      	b.n	8002204 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021d4:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e4:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80021fc:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_I2C_Master_Transmit_DMA+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002202:	2302      	movs	r3, #2
  }
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000000 	.word	0x20000000
 8002210:	14f8b589 	.word	0x14f8b589
 8002214:	ffff0000 	.word	0xffff0000
 8002218:	080039c1 	.word	0x080039c1
 800221c:	08003b6b 	.word	0x08003b6b

08002220 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002240:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002248:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	2b10      	cmp	r3, #16
 800224e:	d003      	beq.n	8002258 <HAL_I2C_EV_IRQHandler+0x38>
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b40      	cmp	r3, #64	; 0x40
 8002254:	f040 80bd 	bne.w	80023d2 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10d      	bne.n	800228e <HAL_I2C_EV_IRQHandler+0x6e>
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002278:	d003      	beq.n	8002282 <HAL_I2C_EV_IRQHandler+0x62>
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002280:	d101      	bne.n	8002286 <HAL_I2C_EV_IRQHandler+0x66>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_I2C_EV_IRQHandler+0x68>
 8002286:	2300      	movs	r3, #0
 8002288:	2b01      	cmp	r3, #1
 800228a:	f000 812e 	beq.w	80024ea <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00c      	beq.n	80022b2 <HAL_I2C_EV_IRQHandler+0x92>
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	0a5b      	lsrs	r3, r3, #9
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d006      	beq.n	80022b2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f001 fd71 	bl	8003d8c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fd6d 	bl	8002d8a <I2C_Master_SB>
 80022b0:	e08e      	b.n	80023d0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HAL_I2C_EV_IRQHandler+0xb2>
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	0a5b      	lsrs	r3, r3, #9
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fde2 	bl	8002e94 <I2C_Master_ADD10>
 80022d0:	e07e      	b.n	80023d0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	085b      	lsrs	r3, r3, #1
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <HAL_I2C_EV_IRQHandler+0xd2>
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	0a5b      	lsrs	r3, r3, #9
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fdfb 	bl	8002ee6 <I2C_Master_ADDR>
 80022f0:	e06e      	b.n	80023d0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d037      	beq.n	800236e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800230c:	f000 80ef 	beq.w	80024ee <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	09db      	lsrs	r3, r3, #7
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00f      	beq.n	800233c <HAL_I2C_EV_IRQHandler+0x11c>
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	0a9b      	lsrs	r3, r3, #10
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <HAL_I2C_EV_IRQHandler+0x11c>
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d103      	bne.n	800233c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f9fa 	bl	800272e <I2C_MasterTransmit_TXE>
 800233a:	e049      	b.n	80023d0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80d2 	beq.w	80024ee <HAL_I2C_EV_IRQHandler+0x2ce>
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	0a5b      	lsrs	r3, r3, #9
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 80cb 	beq.w	80024ee <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b10      	cmp	r3, #16
 800235c:	d103      	bne.n	8002366 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fa81 	bl	8002866 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002364:	e0c3      	b.n	80024ee <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fae5 	bl	8002936 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800236c:	e0bf      	b.n	80024ee <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800237c:	f000 80b7 	beq.w	80024ee <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	099b      	lsrs	r3, r3, #6
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00f      	beq.n	80023ac <HAL_I2C_EV_IRQHandler+0x18c>
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	0a9b      	lsrs	r3, r3, #10
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <HAL_I2C_EV_IRQHandler+0x18c>
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d103      	bne.n	80023ac <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fb55 	bl	8002a54 <I2C_MasterReceive_RXNE>
 80023aa:	e011      	b.n	80023d0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 809a 	beq.w	80024ee <HAL_I2C_EV_IRQHandler+0x2ce>
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	0a5b      	lsrs	r3, r3, #9
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8093 	beq.w	80024ee <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fbf4 	bl	8002bb6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023ce:	e08e      	b.n	80024ee <HAL_I2C_EV_IRQHandler+0x2ce>
 80023d0:	e08d      	b.n	80024ee <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d004      	beq.n	80023e4 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	e007      	b.n	80023f4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	085b      	lsrs	r3, r3, #1
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d012      	beq.n	8002426 <HAL_I2C_EV_IRQHandler+0x206>
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	0a5b      	lsrs	r3, r3, #9
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00c      	beq.n	8002426 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800241c:	69b9      	ldr	r1, [r7, #24]
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 ffb8 	bl	8003394 <I2C_Slave_ADDR>
 8002424:	e066      	b.n	80024f4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <HAL_I2C_EV_IRQHandler+0x226>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	0a5b      	lsrs	r3, r3, #9
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 ffec 	bl	800341c <I2C_Slave_STOPF>
 8002444:	e056      	b.n	80024f4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002446:	7bbb      	ldrb	r3, [r7, #14]
 8002448:	2b21      	cmp	r3, #33	; 0x21
 800244a:	d002      	beq.n	8002452 <HAL_I2C_EV_IRQHandler+0x232>
 800244c:	7bbb      	ldrb	r3, [r7, #14]
 800244e:	2b29      	cmp	r3, #41	; 0x29
 8002450:	d125      	bne.n	800249e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	09db      	lsrs	r3, r3, #7
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00f      	beq.n	800247e <HAL_I2C_EV_IRQHandler+0x25e>
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	0a9b      	lsrs	r3, r3, #10
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <HAL_I2C_EV_IRQHandler+0x25e>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d103      	bne.n	800247e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fed0 	bl	800321c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800247c:	e039      	b.n	80024f2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d033      	beq.n	80024f2 <HAL_I2C_EV_IRQHandler+0x2d2>
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	0a5b      	lsrs	r3, r3, #9
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d02d      	beq.n	80024f2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fefd 	bl	8003296 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800249c:	e029      	b.n	80024f2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	099b      	lsrs	r3, r3, #6
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00f      	beq.n	80024ca <HAL_I2C_EV_IRQHandler+0x2aa>
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	0a9b      	lsrs	r3, r3, #10
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_I2C_EV_IRQHandler+0x2aa>
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d103      	bne.n	80024ca <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 ff07 	bl	80032d6 <I2C_SlaveReceive_RXNE>
 80024c8:	e014      	b.n	80024f4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00e      	beq.n	80024f4 <HAL_I2C_EV_IRQHandler+0x2d4>
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	0a5b      	lsrs	r3, r3, #9
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 ff35 	bl	8003352 <I2C_SlaveReceive_BTF>
 80024e8:	e004      	b.n	80024f4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80024ea:	bf00      	nop
 80024ec:	e002      	b.n	80024f4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ee:	bf00      	nop
 80024f0:	e000      	b.n	80024f4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024f2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80024f4:	3720      	adds	r7, #32
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b08a      	sub	sp, #40	; 0x28
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002512:	2300      	movs	r3, #0
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800251c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_I2C_ER_IRQHandler+0x5e>
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d010      	beq.n	8002558 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002546:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002556:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	0a5b      	lsrs	r3, r3, #9
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00e      	beq.n	8002582 <HAL_I2C_ER_IRQHandler+0x88>
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002580:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	0a9b      	lsrs	r3, r3, #10
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d03f      	beq.n	800260e <HAL_I2C_ER_IRQHandler+0x114>
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d039      	beq.n	800260e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800259a:	7efb      	ldrb	r3, [r7, #27]
 800259c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ac:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80025b4:	7ebb      	ldrb	r3, [r7, #26]
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	d112      	bne.n	80025e0 <HAL_I2C_ER_IRQHandler+0xe6>
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10f      	bne.n	80025e0 <HAL_I2C_ER_IRQHandler+0xe6>
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	2b21      	cmp	r3, #33	; 0x21
 80025c4:	d008      	beq.n	80025d8 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	2b29      	cmp	r3, #41	; 0x29
 80025ca:	d005      	beq.n	80025d8 <HAL_I2C_ER_IRQHandler+0xde>
 80025cc:	7cfb      	ldrb	r3, [r7, #19]
 80025ce:	2b28      	cmp	r3, #40	; 0x28
 80025d0:	d106      	bne.n	80025e0 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b21      	cmp	r3, #33	; 0x21
 80025d6:	d103      	bne.n	80025e0 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f001 f84f 	bl	800367c <I2C_Slave_AF>
 80025de:	e016      	b.n	800260e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025e8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80025f2:	7efb      	ldrb	r3, [r7, #27]
 80025f4:	2b10      	cmp	r3, #16
 80025f6:	d002      	beq.n	80025fe <HAL_I2C_ER_IRQHandler+0x104>
 80025f8:	7efb      	ldrb	r3, [r7, #27]
 80025fa:	2b40      	cmp	r3, #64	; 0x40
 80025fc:	d107      	bne.n	800260e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	0adb      	lsrs	r3, r3, #11
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00e      	beq.n	8002638 <HAL_I2C_ER_IRQHandler+0x13e>
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	f043 0308 	orr.w	r3, r3, #8
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002636:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	2b00      	cmp	r3, #0
 800263c:	d008      	beq.n	8002650 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f001 f886 	bl	800375c <I2C_ITError>
  }
}
 8002650:	bf00      	nop
 8002652:	3728      	adds	r7, #40	; 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	70fb      	strb	r3, [r7, #3]
 80026ac:	4613      	mov	r3, r2
 80026ae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002722:	b2db      	uxtb	r3, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002744:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	d150      	bne.n	80027f6 <I2C_MasterTransmit_TXE+0xc8>
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	2b21      	cmp	r3, #33	; 0x21
 8002758:	d14d      	bne.n	80027f6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d01d      	beq.n	800279c <I2C_MasterTransmit_TXE+0x6e>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b20      	cmp	r3, #32
 8002764:	d01a      	beq.n	800279c <I2C_MasterTransmit_TXE+0x6e>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800276c:	d016      	beq.n	800279c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800277c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2211      	movs	r2, #17
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff5f 	bl	8002658 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800279a:	e060      	b.n	800285e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027aa:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ba:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b40      	cmp	r3, #64	; 0x40
 80027d4:	d107      	bne.n	80027e6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ff74 	bl	80026cc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027e4:	e03b      	b.n	800285e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ff32 	bl	8002658 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027f4:	e033      	b.n	800285e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b21      	cmp	r3, #33	; 0x21
 80027fa:	d005      	beq.n	8002808 <I2C_MasterTransmit_TXE+0xda>
 80027fc:	7bbb      	ldrb	r3, [r7, #14]
 80027fe:	2b40      	cmp	r3, #64	; 0x40
 8002800:	d12d      	bne.n	800285e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b22      	cmp	r3, #34	; 0x22
 8002806:	d12a      	bne.n	800285e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d108      	bne.n	8002824 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002820:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002822:	e01c      	b.n	800285e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b40      	cmp	r3, #64	; 0x40
 800282e:	d103      	bne.n	8002838 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f880 	bl	8002936 <I2C_MemoryTransmit_TXE_BTF>
}
 8002836:	e012      	b.n	800285e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	781a      	ldrb	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800285c:	e7ff      	b.n	800285e <I2C_MasterTransmit_TXE+0x130>
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b21      	cmp	r3, #33	; 0x21
 800287e:	d156      	bne.n	800292e <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d012      	beq.n	80028b0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	781a      	ldrb	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80028ae:	e03e      	b.n	800292e <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d01d      	beq.n	80028f2 <I2C_MasterTransmit_BTF+0x8c>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d01a      	beq.n	80028f2 <I2C_MasterTransmit_BTF+0x8c>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028c2:	d016      	beq.n	80028f2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028d2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2211      	movs	r2, #17
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff feb4 	bl	8002658 <HAL_I2C_MasterTxCpltCallback>
}
 80028f0:	e01d      	b.n	800292e <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002900:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002910:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff fe95 	bl	8002658 <HAL_I2C_MasterTxCpltCallback>
}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002944:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294a:	2b00      	cmp	r3, #0
 800294c:	d11d      	bne.n	800298a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002952:	2b01      	cmp	r3, #1
 8002954:	d10b      	bne.n	800296e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295a:	b2da      	uxtb	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002966:	1c9a      	adds	r2, r3, #2
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800296c:	e06e      	b.n	8002a4c <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002972:	b29b      	uxth	r3, r3
 8002974:	121b      	asrs	r3, r3, #8
 8002976:	b2da      	uxtb	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002988:	e060      	b.n	8002a4c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298e:	2b01      	cmp	r3, #1
 8002990:	d10b      	bne.n	80029aa <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002996:	b2da      	uxtb	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029a8:	e050      	b.n	8002a4c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d14c      	bne.n	8002a4c <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	2b22      	cmp	r3, #34	; 0x22
 80029b6:	d108      	bne.n	80029ca <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029c6:	601a      	str	r2, [r3, #0]
}
 80029c8:	e040      	b.n	8002a4c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d015      	beq.n	8002a00 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	2b21      	cmp	r3, #33	; 0x21
 80029d8:	d112      	bne.n	8002a00 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	781a      	ldrb	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029fe:	e025      	b.n	8002a4c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d120      	bne.n	8002a4c <I2C_MemoryTransmit_TXE_BTF+0x116>
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b21      	cmp	r3, #33	; 0x21
 8002a0e:	d11d      	bne.n	8002a4c <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a1e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff fe40 	bl	80026cc <HAL_I2C_MemTxCpltCallback>
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b22      	cmp	r3, #34	; 0x22
 8002a66:	f040 80a2 	bne.w	8002bae <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d921      	bls.n	8002abc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	f040 8082 	bne.w	8002bae <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002aba:	e078      	b.n	8002bae <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d074      	beq.n	8002bae <I2C_MasterReceive_RXNE+0x15a>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d002      	beq.n	8002ad0 <I2C_MasterReceive_RXNE+0x7c>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d16e      	bne.n	8002bae <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f001 f929 	bl	8003d28 <I2C_WaitOnSTOPRequestThroughIT>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d142      	bne.n	8002b62 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aea:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002afa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b40      	cmp	r3, #64	; 0x40
 8002b34:	d10a      	bne.n	8002b4c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff fdca 	bl	80026de <HAL_I2C_MemRxCpltCallback>
}
 8002b4a:	e030      	b.n	8002bae <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2212      	movs	r2, #18
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff fd85 	bl	800266a <HAL_I2C_MasterRxCpltCallback>
}
 8002b60:	e025      	b.n	8002bae <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b70:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff fda1 	bl	80026f0 <HAL_I2C_ErrorCallback>
}
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d11b      	bne.n	8002c06 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bdc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002c04:	e0bd      	b.n	8002d82 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d129      	bne.n	8002c64 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c1e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d00a      	beq.n	8002c3c <I2C_MasterReceive_BTF+0x86>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d007      	beq.n	8002c3c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c62:	e08e      	b.n	8002d82 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d176      	bne.n	8002d5c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d002      	beq.n	8002c7a <I2C_MasterReceive_BTF+0xc4>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b10      	cmp	r3, #16
 8002c78:	d108      	bne.n	8002c8c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e019      	b.n	8002cc0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d002      	beq.n	8002c98 <I2C_MasterReceive_BTF+0xe2>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d108      	bne.n	8002caa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e00a      	b.n	8002cc0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d007      	beq.n	8002cc0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d1a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	d10a      	bne.n	8002d46 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fccd 	bl	80026de <HAL_I2C_MemRxCpltCallback>
}
 8002d44:	e01d      	b.n	8002d82 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2212      	movs	r2, #18
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff fc88 	bl	800266a <HAL_I2C_MasterRxCpltCallback>
}
 8002d5a:	e012      	b.n	8002d82 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b40      	cmp	r3, #64	; 0x40
 8002d9c:	d117      	bne.n	8002dce <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002db6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002db8:	e067      	b.n	8002e8a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	611a      	str	r2, [r3, #16]
}
 8002dcc:	e05d      	b.n	8002e8a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dd6:	d133      	bne.n	8002e40 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b21      	cmp	r3, #33	; 0x21
 8002de2:	d109      	bne.n	8002df8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002df4:	611a      	str	r2, [r3, #16]
 8002df6:	e008      	b.n	8002e0a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <I2C_Master_SB+0x92>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d108      	bne.n	8002e2e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d032      	beq.n	8002e8a <I2C_Master_SB+0x100>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d02d      	beq.n	8002e8a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e3c:	605a      	str	r2, [r3, #4]
}
 8002e3e:	e024      	b.n	8002e8a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10e      	bne.n	8002e66 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	11db      	asrs	r3, r3, #7
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f003 0306 	and.w	r3, r3, #6
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	f063 030f 	orn	r3, r3, #15
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	611a      	str	r2, [r3, #16]
}
 8002e64:	e011      	b.n	8002e8a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d10d      	bne.n	8002e8a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	11db      	asrs	r3, r3, #7
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f003 0306 	and.w	r3, r3, #6
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f063 030e 	orn	r3, r3, #14
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	611a      	str	r2, [r3, #16]
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d103      	bne.n	8002eb8 <I2C_Master_ADD10+0x24>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d011      	beq.n	8002edc <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d104      	bne.n	8002ecc <I2C_Master_ADD10+0x38>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eda:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr

08002ee6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b091      	sub	sp, #68	; 0x44
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b22      	cmp	r3, #34	; 0x22
 8002f0e:	f040 8174 	bne.w	80031fa <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10f      	bne.n	8002f3a <I2C_Master_ADDR+0x54>
 8002f1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f1e:	2b40      	cmp	r3, #64	; 0x40
 8002f20:	d10b      	bne.n	8002f3a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f22:	2300      	movs	r3, #0
 8002f24:	633b      	str	r3, [r7, #48]	; 0x30
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	633b      	str	r3, [r7, #48]	; 0x30
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	e16b      	b.n	8003212 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d11d      	bne.n	8002f7e <I2C_Master_ADDR+0x98>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f4a:	d118      	bne.n	8002f7e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f70:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	651a      	str	r2, [r3, #80]	; 0x50
 8002f7c:	e149      	b.n	8003212 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d113      	bne.n	8002fb0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f88:	2300      	movs	r3, #0
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	e120      	b.n	80031f2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	f040 808a 	bne.w	80030d0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fc2:	d137      	bne.n	8003034 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe2:	d113      	bne.n	800300c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	e0f2      	b.n	80031f2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300c:	2300      	movs	r3, #0
 800300e:	623b      	str	r3, [r7, #32]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	623b      	str	r3, [r7, #32]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	623b      	str	r3, [r7, #32]
 8003020:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	e0de      	b.n	80031f2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	2b08      	cmp	r3, #8
 8003038:	d02e      	beq.n	8003098 <I2C_Master_ADDR+0x1b2>
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303c:	2b20      	cmp	r3, #32
 800303e:	d02b      	beq.n	8003098 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003042:	2b12      	cmp	r3, #18
 8003044:	d102      	bne.n	800304c <I2C_Master_ADDR+0x166>
 8003046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003048:	2b01      	cmp	r3, #1
 800304a:	d125      	bne.n	8003098 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800304c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304e:	2b04      	cmp	r3, #4
 8003050:	d00e      	beq.n	8003070 <I2C_Master_ADDR+0x18a>
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003054:	2b02      	cmp	r3, #2
 8003056:	d00b      	beq.n	8003070 <I2C_Master_ADDR+0x18a>
 8003058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305a:	2b10      	cmp	r3, #16
 800305c:	d008      	beq.n	8003070 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	e007      	b.n	8003080 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800307e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003080:	2300      	movs	r3, #0
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	61fb      	str	r3, [r7, #28]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	e0ac      	b.n	80031f2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a8:	2300      	movs	r3, #0
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e090      	b.n	80031f2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d158      	bne.n	800318c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80030da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d021      	beq.n	8003124 <I2C_Master_ADDR+0x23e>
 80030e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d01e      	beq.n	8003124 <I2C_Master_ADDR+0x23e>
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d01b      	beq.n	8003124 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030fa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e012      	b.n	800314a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003132:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003134:	2300      	movs	r3, #0
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003158:	d14b      	bne.n	80031f2 <I2C_Master_ADDR+0x30c>
 800315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003160:	d00b      	beq.n	800317a <I2C_Master_ADDR+0x294>
 8003162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003164:	2b01      	cmp	r3, #1
 8003166:	d008      	beq.n	800317a <I2C_Master_ADDR+0x294>
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	2b08      	cmp	r3, #8
 800316c:	d005      	beq.n	800317a <I2C_Master_ADDR+0x294>
 800316e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003170:	2b10      	cmp	r3, #16
 8003172:	d002      	beq.n	800317a <I2C_Master_ADDR+0x294>
 8003174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003176:	2b20      	cmp	r3, #32
 8003178:	d13b      	bne.n	80031f2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	e032      	b.n	80031f2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800319a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031aa:	d117      	bne.n	80031dc <I2C_Master_ADDR+0x2f6>
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031b2:	d00b      	beq.n	80031cc <I2C_Master_ADDR+0x2e6>
 80031b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d008      	beq.n	80031cc <I2C_Master_ADDR+0x2e6>
 80031ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d005      	beq.n	80031cc <I2C_Master_ADDR+0x2e6>
 80031c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d002      	beq.n	80031cc <I2C_Master_ADDR+0x2e6>
 80031c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d107      	bne.n	80031dc <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80031f8:	e00b      	b.n	8003212 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	68bb      	ldr	r3, [r7, #8]
}
 8003210:	e7ff      	b.n	8003212 <I2C_Master_ADDR+0x32c>
 8003212:	bf00      	nop
 8003214:	3744      	adds	r7, #68	; 0x44
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d02b      	beq.n	800328e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	781a      	ldrb	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d114      	bne.n	800328e <I2C_SlaveTransmit_TXE+0x72>
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	2b29      	cmp	r3, #41	; 0x29
 8003268:	d111      	bne.n	800328e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003278:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2221      	movs	r2, #33	; 0x21
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2228      	movs	r2, #40	; 0x28
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff f9f7 	bl	800267c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800328e:	bf00      	nop
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d011      	beq.n	80032cc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	781a      	ldrb	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr

080032d6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d02c      	beq.n	800334a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d114      	bne.n	800334a <I2C_SlaveReceive_RXNE+0x74>
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	2b2a      	cmp	r3, #42	; 0x2a
 8003324:	d111      	bne.n	800334a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003334:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2222      	movs	r2, #34	; 0x22
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2228      	movs	r2, #40	; 0x28
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff f9a2 	bl	800268e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d012      	beq.n	800338a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800339e:	2300      	movs	r3, #0
 80033a0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033ae:	2b28      	cmp	r3, #40	; 0x28
 80033b0:	d127      	bne.n	8003402 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	089b      	lsrs	r3, r3, #2
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	09db      	lsrs	r3, r3, #7
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	81bb      	strh	r3, [r7, #12]
 80033e4:	e002      	b.n	80033ec <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80033f4:	89ba      	ldrh	r2, [r7, #12]
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	4619      	mov	r1, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff f950 	bl	80026a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003400:	e008      	b.n	8003414 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f06f 0202 	mvn.w	r2, #2
 800340a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800343a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003468:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003478:	d172      	bne.n	8003560 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	2b22      	cmp	r3, #34	; 0x22
 800347e:	d002      	beq.n	8003486 <I2C_Slave_STOPF+0x6a>
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b2a      	cmp	r3, #42	; 0x2a
 8003484:	d135      	bne.n	80034f2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	b29a      	uxth	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f043 0204 	orr.w	r2, r3, #4
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe fa82 	bl	80019c8 <HAL_DMA_GetState>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d049      	beq.n	800355e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	4a69      	ldr	r2, [pc, #420]	; (8003674 <I2C_Slave_STOPF+0x258>)
 80034d0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe f8fa 	bl	80016d0 <HAL_DMA_Abort_IT>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d03d      	beq.n	800355e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034ec:	4610      	mov	r0, r2
 80034ee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034f0:	e035      	b.n	800355e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f043 0204 	orr.w	r2, r3, #4
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003524:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe fa4c 	bl	80019c8 <HAL_DMA_GetState>
 8003530:	4603      	mov	r3, r0
 8003532:	2b01      	cmp	r3, #1
 8003534:	d014      	beq.n	8003560 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353a:	4a4e      	ldr	r2, [pc, #312]	; (8003674 <I2C_Slave_STOPF+0x258>)
 800353c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe f8c4 	bl	80016d0 <HAL_DMA_Abort_IT>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003558:	4610      	mov	r0, r2
 800355a:	4798      	blx	r3
 800355c:	e000      	b.n	8003560 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800355e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d03e      	beq.n	80035e8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b04      	cmp	r3, #4
 8003576:	d112      	bne.n	800359e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b40      	cmp	r3, #64	; 0x40
 80035aa:	d112      	bne.n	80035d2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691a      	ldr	r2, [r3, #16]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	f043 0204 	orr.w	r2, r3, #4
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f8b3 	bl	800375c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80035f6:	e039      	b.n	800366c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b2a      	cmp	r3, #42	; 0x2a
 80035fc:	d109      	bne.n	8003612 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2228      	movs	r2, #40	; 0x28
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff f83e 	bl	800268e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b28      	cmp	r3, #40	; 0x28
 800361c:	d111      	bne.n	8003642 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a15      	ldr	r2, [pc, #84]	; (8003678 <I2C_Slave_STOPF+0x25c>)
 8003622:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff f83d 	bl	80026ba <HAL_I2C_ListenCpltCallback>
}
 8003640:	e014      	b.n	800366c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	2b22      	cmp	r3, #34	; 0x22
 8003648:	d002      	beq.n	8003650 <I2C_Slave_STOPF+0x234>
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	2b22      	cmp	r3, #34	; 0x22
 800364e:	d10d      	bne.n	800366c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff f811 	bl	800268e <HAL_I2C_SlaveRxCpltCallback>
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	08003bd9 	.word	0x08003bd9
 8003678:	ffff0000 	.word	0xffff0000

0800367c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d002      	beq.n	800369e <I2C_Slave_AF+0x22>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b20      	cmp	r3, #32
 800369c:	d129      	bne.n	80036f2 <I2C_Slave_AF+0x76>
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	2b28      	cmp	r3, #40	; 0x28
 80036a2:	d126      	bne.n	80036f2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a2c      	ldr	r2, [pc, #176]	; (8003758 <I2C_Slave_AF+0xdc>)
 80036a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036b8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036c2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fe ffe5 	bl	80026ba <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80036f0:	e02e      	b.n	8003750 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	2b21      	cmp	r3, #33	; 0x21
 80036f6:	d126      	bne.n	8003746 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a17      	ldr	r2, [pc, #92]	; (8003758 <I2C_Slave_AF+0xdc>)
 80036fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2221      	movs	r2, #33	; 0x21
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003722:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800372c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe ff9c 	bl	800267c <HAL_I2C_SlaveTxCpltCallback>
}
 8003744:	e004      	b.n	8003750 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800374e:	615a      	str	r2, [r3, #20]
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	ffff0000 	.word	0xffff0000

0800375c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003772:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003774:	7bbb      	ldrb	r3, [r7, #14]
 8003776:	2b10      	cmp	r3, #16
 8003778:	d002      	beq.n	8003780 <I2C_ITError+0x24>
 800377a:	7bbb      	ldrb	r3, [r7, #14]
 800377c:	2b40      	cmp	r3, #64	; 0x40
 800377e:	d10a      	bne.n	8003796 <I2C_ITError+0x3a>
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b22      	cmp	r3, #34	; 0x22
 8003784:	d107      	bne.n	8003796 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003794:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800379c:	2b28      	cmp	r3, #40	; 0x28
 800379e:	d107      	bne.n	80037b0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2228      	movs	r2, #40	; 0x28
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037ae:	e015      	b.n	80037dc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037be:	d00a      	beq.n	80037d6 <I2C_ITError+0x7a>
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b60      	cmp	r3, #96	; 0x60
 80037c4:	d007      	beq.n	80037d6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ea:	d161      	bne.n	80038b0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037fa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003800:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003804:	2b01      	cmp	r3, #1
 8003806:	d020      	beq.n	800384a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380c:	4a6a      	ldr	r2, [pc, #424]	; (80039b8 <I2C_ITError+0x25c>)
 800380e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003814:	4618      	mov	r0, r3
 8003816:	f7fd ff5b 	bl	80016d0 <HAL_DMA_Abort_IT>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 8089 	beq.w	8003934 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003844:	4610      	mov	r0, r2
 8003846:	4798      	blx	r3
 8003848:	e074      	b.n	8003934 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	4a5a      	ldr	r2, [pc, #360]	; (80039b8 <I2C_ITError+0x25c>)
 8003850:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	4618      	mov	r0, r3
 8003858:	f7fd ff3a 	bl	80016d0 <HAL_DMA_Abort_IT>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d068      	beq.n	8003934 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386c:	2b40      	cmp	r3, #64	; 0x40
 800386e:	d10b      	bne.n	8003888 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0201 	bic.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038aa:	4610      	mov	r0, r2
 80038ac:	4798      	blx	r3
 80038ae:	e041      	b.n	8003934 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b60      	cmp	r3, #96	; 0x60
 80038ba:	d125      	bne.n	8003908 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d10b      	bne.n	80038f0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7fe fefe 	bl	8002702 <HAL_I2C_AbortCpltCallback>
 8003906:	e015      	b.n	8003934 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b40      	cmp	r3, #64	; 0x40
 8003914:	d10b      	bne.n	800392e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fe fede 	bl	80026f0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10e      	bne.n	8003962 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003954:	2b00      	cmp	r3, #0
 8003956:	d104      	bne.n	8003962 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003970:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003978:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b04      	cmp	r3, #4
 8003984:	d113      	bne.n	80039ae <I2C_ITError+0x252>
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	2b28      	cmp	r3, #40	; 0x28
 800398a:	d110      	bne.n	80039ae <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a0b      	ldr	r2, [pc, #44]	; (80039bc <I2C_ITError+0x260>)
 8003990:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7fe fe86 	bl	80026ba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	08003bd9 	.word	0x08003bd9
 80039bc:	ffff0000 	.word	0xffff0000

080039c0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039dc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039f2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a00:	2200      	movs	r2, #0
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	2200      	movs	r2, #0
 8003a12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003a14:	7cfb      	ldrb	r3, [r7, #19]
 8003a16:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003a1a:	2b21      	cmp	r3, #33	; 0x21
 8003a1c:	d007      	beq.n	8003a2e <I2C_DMAXferCplt+0x6e>
 8003a1e:	7cfb      	ldrb	r3, [r7, #19]
 8003a20:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8003a24:	2b22      	cmp	r3, #34	; 0x22
 8003a26:	d131      	bne.n	8003a8c <I2C_DMAXferCplt+0xcc>
 8003a28:	7cbb      	ldrb	r3, [r7, #18]
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d12e      	bne.n	8003a8c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a3c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2200      	movs	r2, #0
 8003a42:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003a44:	7cfb      	ldrb	r3, [r7, #19]
 8003a46:	2b29      	cmp	r3, #41	; 0x29
 8003a48:	d10a      	bne.n	8003a60 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2221      	movs	r2, #33	; 0x21
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2228      	movs	r2, #40	; 0x28
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a58:	6978      	ldr	r0, [r7, #20]
 8003a5a:	f7fe fe0f 	bl	800267c <HAL_I2C_SlaveTxCpltCallback>
 8003a5e:	e00c      	b.n	8003a7a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	2b2a      	cmp	r3, #42	; 0x2a
 8003a64:	d109      	bne.n	8003a7a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2222      	movs	r2, #34	; 0x22
 8003a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2228      	movs	r2, #40	; 0x28
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a74:	6978      	ldr	r0, [r7, #20]
 8003a76:	f7fe fe0a 	bl	800268e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003a88:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003a8a:	e06a      	b.n	8003b62 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d064      	beq.n	8003b62 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d107      	bne.n	8003ab2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ac0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ac8:	d009      	beq.n	8003ade <I2C_DMAXferCplt+0x11e>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d006      	beq.n	8003ade <I2C_DMAXferCplt+0x11e>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003ad6:	d002      	beq.n	8003ade <I2C_DMAXferCplt+0x11e>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d107      	bne.n	8003aee <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aec:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003afc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b0c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2200      	movs	r2, #0
 8003b12:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003b1c:	6978      	ldr	r0, [r7, #20]
 8003b1e:	f7fe fde7 	bl	80026f0 <HAL_I2C_ErrorCallback>
}
 8003b22:	e01e      	b.n	8003b62 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b40      	cmp	r3, #64	; 0x40
 8003b36:	d10a      	bne.n	8003b4e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003b46:	6978      	ldr	r0, [r7, #20]
 8003b48:	f7fe fdc9 	bl	80026de <HAL_I2C_MemRxCpltCallback>
}
 8003b4c:	e009      	b.n	8003b62 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2212      	movs	r2, #18
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b5c:	6978      	ldr	r0, [r7, #20]
 8003b5e:	f7fe fd84 	bl	800266a <HAL_I2C_MasterRxCpltCallback>
}
 8003b62:	bf00      	nop
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b84:	2200      	movs	r2, #0
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b94:	2200      	movs	r2, #0
 8003b96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba6:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f043 0210 	orr.w	r2, r3, #16
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f7fe fd90 	bl	80026f0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bf2:	4b4b      	ldr	r3, [pc, #300]	; (8003d20 <I2C_DMAAbort+0x148>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	08db      	lsrs	r3, r3, #3
 8003bf8:	4a4a      	ldr	r2, [pc, #296]	; (8003d24 <I2C_DMAAbort+0x14c>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	0a1a      	lsrs	r2, r3, #8
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	00da      	lsls	r2, r3, #3
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f043 0220 	orr.w	r2, r3, #32
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003c1e:	e00a      	b.n	8003c36 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c34:	d0ea      	beq.n	8003c0c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	2200      	movs	r2, #0
 8003c44:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	2200      	movs	r2, #0
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c78:	2200      	movs	r2, #0
 8003c7a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	2200      	movs	r2, #0
 8003c8a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b60      	cmp	r3, #96	; 0x60
 8003ca6:	d10e      	bne.n	8003cc6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003cbe:	6978      	ldr	r0, [r7, #20]
 8003cc0:	f7fe fd1f 	bl	8002702 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cc4:	e027      	b.n	8003d16 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cc6:	7cfb      	ldrb	r3, [r7, #19]
 8003cc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ccc:	2b28      	cmp	r3, #40	; 0x28
 8003cce:	d117      	bne.n	8003d00 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2228      	movs	r2, #40	; 0x28
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cfe:	e007      	b.n	8003d10 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003d10:	6978      	ldr	r0, [r7, #20]
 8003d12:	f7fe fced 	bl	80026f0 <HAL_I2C_ErrorCallback>
}
 8003d16:	bf00      	nop
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000000 	.word	0x20000000
 8003d24:	14f8b589 	.word	0x14f8b589

08003d28 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d34:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	08db      	lsrs	r3, r3, #3
 8003d3a:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	0a1a      	lsrs	r2, r3, #8
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f043 0220 	orr.w	r2, r3, #32
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e008      	b.n	8003d78 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d74:	d0e9      	beq.n	8003d4a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20000000 	.word	0x20000000
 8003d88:	14f8b589 	.word	0x14f8b589

08003d8c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d9c:	d103      	bne.n	8003da6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003da4:	e007      	b.n	8003db6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003dae:	d102      	bne.n	8003db6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2208      	movs	r2, #8
 8003db4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e26c      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8087 	beq.w	8003eee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003de0:	4b92      	ldr	r3, [pc, #584]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 030c 	and.w	r3, r3, #12
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d00c      	beq.n	8003e06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003dec:	4b8f      	ldr	r3, [pc, #572]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 030c 	and.w	r3, r3, #12
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d112      	bne.n	8003e1e <HAL_RCC_OscConfig+0x5e>
 8003df8:	4b8c      	ldr	r3, [pc, #560]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e04:	d10b      	bne.n	8003e1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e06:	4b89      	ldr	r3, [pc, #548]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d06c      	beq.n	8003eec <HAL_RCC_OscConfig+0x12c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d168      	bne.n	8003eec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e246      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e26:	d106      	bne.n	8003e36 <HAL_RCC_OscConfig+0x76>
 8003e28:	4b80      	ldr	r3, [pc, #512]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a7f      	ldr	r2, [pc, #508]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	e02e      	b.n	8003e94 <HAL_RCC_OscConfig+0xd4>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x98>
 8003e3e:	4b7b      	ldr	r3, [pc, #492]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a7a      	ldr	r2, [pc, #488]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b78      	ldr	r3, [pc, #480]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a77      	ldr	r2, [pc, #476]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e01d      	b.n	8003e94 <HAL_RCC_OscConfig+0xd4>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCC_OscConfig+0xbc>
 8003e62:	4b72      	ldr	r3, [pc, #456]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a71      	ldr	r2, [pc, #452]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	4b6f      	ldr	r3, [pc, #444]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a6e      	ldr	r2, [pc, #440]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e00b      	b.n	8003e94 <HAL_RCC_OscConfig+0xd4>
 8003e7c:	4b6b      	ldr	r3, [pc, #428]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a6a      	ldr	r2, [pc, #424]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	4b68      	ldr	r3, [pc, #416]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a67      	ldr	r2, [pc, #412]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d013      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fd fa24 	bl	80012e8 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea4:	f7fd fa20 	bl	80012e8 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	; 0x64
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e1fa      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb6:	4b5d      	ldr	r3, [pc, #372]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0xe4>
 8003ec2:	e014      	b.n	8003eee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fd fa10 	bl	80012e8 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ecc:	f7fd fa0c 	bl	80012e8 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b64      	cmp	r3, #100	; 0x64
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e1e6      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ede:	4b53      	ldr	r3, [pc, #332]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x10c>
 8003eea:	e000      	b.n	8003eee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d063      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003efa:	4b4c      	ldr	r3, [pc, #304]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00b      	beq.n	8003f1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f06:	4b49      	ldr	r3, [pc, #292]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d11c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x18c>
 8003f12:	4b46      	ldr	r3, [pc, #280]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d116      	bne.n	8003f4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1e:	4b43      	ldr	r3, [pc, #268]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_RCC_OscConfig+0x176>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d001      	beq.n	8003f36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e1ba      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f36:	4b3d      	ldr	r3, [pc, #244]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4939      	ldr	r1, [pc, #228]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f4a:	e03a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d020      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f54:	4b36      	ldr	r3, [pc, #216]	; (8004030 <HAL_RCC_OscConfig+0x270>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5a:	f7fd f9c5 	bl	80012e8 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f62:	f7fd f9c1 	bl	80012e8 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e19b      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f74:	4b2d      	ldr	r3, [pc, #180]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f80:	4b2a      	ldr	r3, [pc, #168]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4927      	ldr	r1, [pc, #156]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	600b      	str	r3, [r1, #0]
 8003f94:	e015      	b.n	8003fc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f96:	4b26      	ldr	r3, [pc, #152]	; (8004030 <HAL_RCC_OscConfig+0x270>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fd f9a4 	bl	80012e8 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fd f9a0 	bl	80012e8 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e17a      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb6:	4b1d      	ldr	r3, [pc, #116]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d03a      	beq.n	8004044 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d019      	beq.n	800400a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd6:	4b17      	ldr	r3, [pc, #92]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fdc:	f7fd f984 	bl	80012e8 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe4:	f7fd f980 	bl	80012e8 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e15a      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff6:	4b0d      	ldr	r3, [pc, #52]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004002:	2001      	movs	r0, #1
 8004004:	f000 fada 	bl	80045bc <RCC_Delay>
 8004008:	e01c      	b.n	8004044 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800400a:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004010:	f7fd f96a 	bl	80012e8 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004016:	e00f      	b.n	8004038 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004018:	f7fd f966 	bl	80012e8 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d908      	bls.n	8004038 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e140      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000
 8004030:	42420000 	.word	0x42420000
 8004034:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004038:	4b9e      	ldr	r3, [pc, #632]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e9      	bne.n	8004018 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80a6 	beq.w	800419e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004052:	2300      	movs	r3, #0
 8004054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004056:	4b97      	ldr	r3, [pc, #604]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10d      	bne.n	800407e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004062:	4b94      	ldr	r3, [pc, #592]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	4a93      	ldr	r2, [pc, #588]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406c:	61d3      	str	r3, [r2, #28]
 800406e:	4b91      	ldr	r3, [pc, #580]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004076:	60bb      	str	r3, [r7, #8]
 8004078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800407a:	2301      	movs	r3, #1
 800407c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407e:	4b8e      	ldr	r3, [pc, #568]	; (80042b8 <HAL_RCC_OscConfig+0x4f8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d118      	bne.n	80040bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800408a:	4b8b      	ldr	r3, [pc, #556]	; (80042b8 <HAL_RCC_OscConfig+0x4f8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a8a      	ldr	r2, [pc, #552]	; (80042b8 <HAL_RCC_OscConfig+0x4f8>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004096:	f7fd f927 	bl	80012e8 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409e:	f7fd f923 	bl	80012e8 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b64      	cmp	r3, #100	; 0x64
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e0fd      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b0:	4b81      	ldr	r3, [pc, #516]	; (80042b8 <HAL_RCC_OscConfig+0x4f8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d106      	bne.n	80040d2 <HAL_RCC_OscConfig+0x312>
 80040c4:	4b7b      	ldr	r3, [pc, #492]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	4a7a      	ldr	r2, [pc, #488]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6213      	str	r3, [r2, #32]
 80040d0:	e02d      	b.n	800412e <HAL_RCC_OscConfig+0x36e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x334>
 80040da:	4b76      	ldr	r3, [pc, #472]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	4a75      	ldr	r2, [pc, #468]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	6213      	str	r3, [r2, #32]
 80040e6:	4b73      	ldr	r3, [pc, #460]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	4a72      	ldr	r2, [pc, #456]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80040ec:	f023 0304 	bic.w	r3, r3, #4
 80040f0:	6213      	str	r3, [r2, #32]
 80040f2:	e01c      	b.n	800412e <HAL_RCC_OscConfig+0x36e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	2b05      	cmp	r3, #5
 80040fa:	d10c      	bne.n	8004116 <HAL_RCC_OscConfig+0x356>
 80040fc:	4b6d      	ldr	r3, [pc, #436]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	4a6c      	ldr	r2, [pc, #432]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004102:	f043 0304 	orr.w	r3, r3, #4
 8004106:	6213      	str	r3, [r2, #32]
 8004108:	4b6a      	ldr	r3, [pc, #424]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	4a69      	ldr	r2, [pc, #420]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	6213      	str	r3, [r2, #32]
 8004114:	e00b      	b.n	800412e <HAL_RCC_OscConfig+0x36e>
 8004116:	4b67      	ldr	r3, [pc, #412]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	4a66      	ldr	r2, [pc, #408]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	6213      	str	r3, [r2, #32]
 8004122:	4b64      	ldr	r3, [pc, #400]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	4a63      	ldr	r2, [pc, #396]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004128:	f023 0304 	bic.w	r3, r3, #4
 800412c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d015      	beq.n	8004162 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004136:	f7fd f8d7 	bl	80012e8 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413c:	e00a      	b.n	8004154 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413e:	f7fd f8d3 	bl	80012e8 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	f241 3288 	movw	r2, #5000	; 0x1388
 800414c:	4293      	cmp	r3, r2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e0ab      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004154:	4b57      	ldr	r3, [pc, #348]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ee      	beq.n	800413e <HAL_RCC_OscConfig+0x37e>
 8004160:	e014      	b.n	800418c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004162:	f7fd f8c1 	bl	80012e8 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004168:	e00a      	b.n	8004180 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416a:	f7fd f8bd 	bl	80012e8 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f241 3288 	movw	r2, #5000	; 0x1388
 8004178:	4293      	cmp	r3, r2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e095      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004180:	4b4c      	ldr	r3, [pc, #304]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1ee      	bne.n	800416a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d105      	bne.n	800419e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004192:	4b48      	ldr	r3, [pc, #288]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	4a47      	ldr	r2, [pc, #284]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800419c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 8081 	beq.w	80042aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041a8:	4b42      	ldr	r3, [pc, #264]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 030c 	and.w	r3, r3, #12
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d061      	beq.n	8004278 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d146      	bne.n	800424a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041bc:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <HAL_RCC_OscConfig+0x4fc>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c2:	f7fd f891 	bl	80012e8 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ca:	f7fd f88d 	bl	80012e8 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e067      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041dc:	4b35      	ldr	r3, [pc, #212]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1f0      	bne.n	80041ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f0:	d108      	bne.n	8004204 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041f2:	4b30      	ldr	r3, [pc, #192]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	492d      	ldr	r1, [pc, #180]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004200:	4313      	orrs	r3, r2
 8004202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004204:	4b2b      	ldr	r3, [pc, #172]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a19      	ldr	r1, [r3, #32]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	430b      	orrs	r3, r1
 8004216:	4927      	ldr	r1, [pc, #156]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004218:	4313      	orrs	r3, r2
 800421a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800421c:	4b27      	ldr	r3, [pc, #156]	; (80042bc <HAL_RCC_OscConfig+0x4fc>)
 800421e:	2201      	movs	r2, #1
 8004220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004222:	f7fd f861 	bl	80012e8 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422a:	f7fd f85d 	bl	80012e8 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e037      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800423c:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x46a>
 8004248:	e02f      	b.n	80042aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424a:	4b1c      	ldr	r3, [pc, #112]	; (80042bc <HAL_RCC_OscConfig+0x4fc>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004250:	f7fd f84a 	bl	80012e8 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004258:	f7fd f846 	bl	80012e8 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e020      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x498>
 8004276:	e018      	b.n	80042aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e013      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	429a      	cmp	r2, r3
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40007000 	.word	0x40007000
 80042bc:	42420060 	.word	0x42420060

080042c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0d0      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042d4:	4b6a      	ldr	r3, [pc, #424]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d910      	bls.n	8004304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b67      	ldr	r3, [pc, #412]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 0207 	bic.w	r2, r3, #7
 80042ea:	4965      	ldr	r1, [pc, #404]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f2:	4b63      	ldr	r3, [pc, #396]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d001      	beq.n	8004304 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0b8      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d020      	beq.n	8004352 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800431c:	4b59      	ldr	r3, [pc, #356]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4a58      	ldr	r2, [pc, #352]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004322:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004326:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004334:	4b53      	ldr	r3, [pc, #332]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	4a52      	ldr	r2, [pc, #328]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800433a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800433e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004340:	4b50      	ldr	r3, [pc, #320]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	494d      	ldr	r1, [pc, #308]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800434e:	4313      	orrs	r3, r2
 8004350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d040      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d107      	bne.n	8004376 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	4b47      	ldr	r3, [pc, #284]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d115      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e07f      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d107      	bne.n	800438e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437e:	4b41      	ldr	r3, [pc, #260]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e073      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438e:	4b3d      	ldr	r3, [pc, #244]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e06b      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800439e:	4b39      	ldr	r3, [pc, #228]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f023 0203 	bic.w	r2, r3, #3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4936      	ldr	r1, [pc, #216]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b0:	f7fc ff9a 	bl	80012e8 <HAL_GetTick>
 80043b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b6:	e00a      	b.n	80043ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b8:	f7fc ff96 	bl	80012e8 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e053      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	4b2d      	ldr	r3, [pc, #180]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f003 020c 	and.w	r2, r3, #12
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	429a      	cmp	r2, r3
 80043de:	d1eb      	bne.n	80043b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043e0:	4b27      	ldr	r3, [pc, #156]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d210      	bcs.n	8004410 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ee:	4b24      	ldr	r3, [pc, #144]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f023 0207 	bic.w	r2, r3, #7
 80043f6:	4922      	ldr	r1, [pc, #136]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fe:	4b20      	ldr	r3, [pc, #128]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d001      	beq.n	8004410 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e032      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800441c:	4b19      	ldr	r3, [pc, #100]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4916      	ldr	r1, [pc, #88]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800442a:	4313      	orrs	r3, r2
 800442c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	490e      	ldr	r1, [pc, #56]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	4313      	orrs	r3, r2
 800444c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800444e:	f000 f821 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 8004452:	4601      	mov	r1, r0
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	091b      	lsrs	r3, r3, #4
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <HAL_RCC_ClockConfig+0x1c8>)
 8004460:	5cd3      	ldrb	r3, [r2, r3]
 8004462:	fa21 f303 	lsr.w	r3, r1, r3
 8004466:	4a09      	ldr	r2, [pc, #36]	; (800448c <HAL_RCC_ClockConfig+0x1cc>)
 8004468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <HAL_RCC_ClockConfig+0x1d0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7fc fef8 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40022000 	.word	0x40022000
 8004484:	40021000 	.word	0x40021000
 8004488:	08006b10 	.word	0x08006b10
 800448c:	20000000 	.word	0x20000000
 8004490:	20000004 	.word	0x20000004

08004494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004494:	b490      	push	{r4, r7}
 8004496:	b08a      	sub	sp, #40	; 0x28
 8004498:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800449a:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <HAL_RCC_GetSysClockFreq+0xb0>)
 800449c:	1d3c      	adds	r4, r7, #4
 800449e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80044a4:	4b28      	ldr	r3, [pc, #160]	; (8004548 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	2300      	movs	r3, #0
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	2300      	movs	r3, #0
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044be:	4b23      	ldr	r3, [pc, #140]	; (800454c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d002      	beq.n	80044d4 <HAL_RCC_GetSysClockFreq+0x40>
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d003      	beq.n	80044da <HAL_RCC_GetSysClockFreq+0x46>
 80044d2:	e02d      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044d4:	4b1e      	ldr	r3, [pc, #120]	; (8004550 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044d6:	623b      	str	r3, [r7, #32]
      break;
 80044d8:	e02d      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	0c9b      	lsrs	r3, r3, #18
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044e6:	4413      	add	r3, r2
 80044e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d013      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044f8:	4b14      	ldr	r3, [pc, #80]	; (800454c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	0c5b      	lsrs	r3, r3, #17
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004506:	4413      	add	r3, r2
 8004508:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800450c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	4a0f      	ldr	r2, [pc, #60]	; (8004550 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004512:	fb02 f203 	mul.w	r2, r2, r3
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
 800451e:	e004      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	4a0c      	ldr	r2, [pc, #48]	; (8004554 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004524:	fb02 f303 	mul.w	r3, r2, r3
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	623b      	str	r3, [r7, #32]
      break;
 800452e:	e002      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004532:	623b      	str	r3, [r7, #32]
      break;
 8004534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004536:	6a3b      	ldr	r3, [r7, #32]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3728      	adds	r7, #40	; 0x28
 800453c:	46bd      	mov	sp, r7
 800453e:	bc90      	pop	{r4, r7}
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	08006af0 	.word	0x08006af0
 8004548:	08006b00 	.word	0x08006b00
 800454c:	40021000 	.word	0x40021000
 8004550:	007a1200 	.word	0x007a1200
 8004554:	003d0900 	.word	0x003d0900

08004558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800455c:	4b02      	ldr	r3, [pc, #8]	; (8004568 <HAL_RCC_GetHCLKFreq+0x10>)
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	4618      	mov	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr
 8004568:	20000000 	.word	0x20000000

0800456c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004570:	f7ff fff2 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 8004574:	4601      	mov	r1, r0
 8004576:	4b05      	ldr	r3, [pc, #20]	; (800458c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	0a1b      	lsrs	r3, r3, #8
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	4a03      	ldr	r2, [pc, #12]	; (8004590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004582:	5cd3      	ldrb	r3, [r2, r3]
 8004584:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004588:	4618      	mov	r0, r3
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40021000 	.word	0x40021000
 8004590:	08006b20 	.word	0x08006b20

08004594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004598:	f7ff ffde 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 800459c:	4601      	mov	r1, r0
 800459e:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	0adb      	lsrs	r3, r3, #11
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	4a03      	ldr	r2, [pc, #12]	; (80045b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045aa:	5cd3      	ldrb	r3, [r2, r3]
 80045ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40021000 	.word	0x40021000
 80045b8:	08006b20 	.word	0x08006b20

080045bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <RCC_Delay+0x34>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a0a      	ldr	r2, [pc, #40]	; (80045f4 <RCC_Delay+0x38>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	0a5b      	lsrs	r3, r3, #9
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045d8:	bf00      	nop
  }
  while (Delay --);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1e5a      	subs	r2, r3, #1
 80045de:	60fa      	str	r2, [r7, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f9      	bne.n	80045d8 <RCC_Delay+0x1c>
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	20000000 	.word	0x20000000
 80045f4:	10624dd3 	.word	0x10624dd3

080045f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e041      	b.n	800468e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fc fc8e 	bl	8000f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3304      	adds	r3, #4
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f000 fbd2 	bl	8004de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e041      	b.n	800472c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d106      	bne.n	80046c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f839 	bl	8004734 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f000 fb83 	bl	8004de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr
	...

08004748 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d109      	bne.n	800476c <HAL_TIM_PWM_Start+0x24>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	bf14      	ite	ne
 8004764:	2301      	movne	r3, #1
 8004766:	2300      	moveq	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	e022      	b.n	80047b2 <HAL_TIM_PWM_Start+0x6a>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b04      	cmp	r3, #4
 8004770:	d109      	bne.n	8004786 <HAL_TIM_PWM_Start+0x3e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b01      	cmp	r3, #1
 800477c:	bf14      	ite	ne
 800477e:	2301      	movne	r3, #1
 8004780:	2300      	moveq	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	e015      	b.n	80047b2 <HAL_TIM_PWM_Start+0x6a>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b08      	cmp	r3, #8
 800478a:	d109      	bne.n	80047a0 <HAL_TIM_PWM_Start+0x58>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	bf14      	ite	ne
 8004798:	2301      	movne	r3, #1
 800479a:	2300      	moveq	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	e008      	b.n	80047b2 <HAL_TIM_PWM_Start+0x6a>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	bf14      	ite	ne
 80047ac:	2301      	movne	r3, #1
 80047ae:	2300      	moveq	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e05e      	b.n	8004878 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d104      	bne.n	80047ca <HAL_TIM_PWM_Start+0x82>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c8:	e013      	b.n	80047f2 <HAL_TIM_PWM_Start+0xaa>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d104      	bne.n	80047da <HAL_TIM_PWM_Start+0x92>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d8:	e00b      	b.n	80047f2 <HAL_TIM_PWM_Start+0xaa>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d104      	bne.n	80047ea <HAL_TIM_PWM_Start+0xa2>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047e8:	e003      	b.n	80047f2 <HAL_TIM_PWM_Start+0xaa>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2201      	movs	r2, #1
 80047f8:	6839      	ldr	r1, [r7, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fd70 	bl	80052e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1e      	ldr	r2, [pc, #120]	; (8004880 <HAL_TIM_PWM_Start+0x138>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d107      	bne.n	800481a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004818:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a18      	ldr	r2, [pc, #96]	; (8004880 <HAL_TIM_PWM_Start+0x138>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00e      	beq.n	8004842 <HAL_TIM_PWM_Start+0xfa>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482c:	d009      	beq.n	8004842 <HAL_TIM_PWM_Start+0xfa>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a14      	ldr	r2, [pc, #80]	; (8004884 <HAL_TIM_PWM_Start+0x13c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d004      	beq.n	8004842 <HAL_TIM_PWM_Start+0xfa>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a12      	ldr	r2, [pc, #72]	; (8004888 <HAL_TIM_PWM_Start+0x140>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d111      	bne.n	8004866 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b06      	cmp	r3, #6
 8004852:	d010      	beq.n	8004876 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004864:	e007      	b.n	8004876 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0201 	orr.w	r2, r2, #1
 8004874:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40012c00 	.word	0x40012c00
 8004884:	40000400 	.word	0x40000400
 8004888:	40000800 	.word	0x40000800

0800488c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d122      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d11b      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0202 	mvn.w	r2, #2
 80048b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fa6b 	bl	8004daa <HAL_TIM_IC_CaptureCallback>
 80048d4:	e005      	b.n	80048e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fa5e 	bl	8004d98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fa6d 	bl	8004dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d122      	bne.n	800493c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b04      	cmp	r3, #4
 8004902:	d11b      	bne.n	800493c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0204 	mvn.w	r2, #4
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2202      	movs	r2, #2
 8004912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fa41 	bl	8004daa <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fa34 	bl	8004d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fa43 	bl	8004dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b08      	cmp	r3, #8
 8004948:	d122      	bne.n	8004990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b08      	cmp	r3, #8
 8004956:	d11b      	bne.n	8004990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0208 	mvn.w	r2, #8
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2204      	movs	r2, #4
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fa17 	bl	8004daa <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fa0a 	bl	8004d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fa19 	bl	8004dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	2b10      	cmp	r3, #16
 800499c:	d122      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b10      	cmp	r3, #16
 80049aa:	d11b      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0210 	mvn.w	r2, #16
 80049b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2208      	movs	r2, #8
 80049ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f9ed 	bl	8004daa <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f9e0 	bl	8004d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f9ef 	bl	8004dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d10e      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d107      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0201 	mvn.w	r2, #1
 8004a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f9bb 	bl	8004d86 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1a:	2b80      	cmp	r3, #128	; 0x80
 8004a1c:	d10e      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a28:	2b80      	cmp	r3, #128	; 0x80
 8004a2a:	d107      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fcdd 	bl	80053f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b40      	cmp	r3, #64	; 0x40
 8004a48:	d10e      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d107      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f9b3 	bl	8004dce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d10e      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d107      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0220 	mvn.w	r2, #32
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fca8 	bl	80053e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e0ac      	b.n	8004c10 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b0c      	cmp	r3, #12
 8004ac2:	f200 809f 	bhi.w	8004c04 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004ac6:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004acc:	08004b01 	.word	0x08004b01
 8004ad0:	08004c05 	.word	0x08004c05
 8004ad4:	08004c05 	.word	0x08004c05
 8004ad8:	08004c05 	.word	0x08004c05
 8004adc:	08004b41 	.word	0x08004b41
 8004ae0:	08004c05 	.word	0x08004c05
 8004ae4:	08004c05 	.word	0x08004c05
 8004ae8:	08004c05 	.word	0x08004c05
 8004aec:	08004b83 	.word	0x08004b83
 8004af0:	08004c05 	.word	0x08004c05
 8004af4:	08004c05 	.word	0x08004c05
 8004af8:	08004c05 	.word	0x08004c05
 8004afc:	08004bc3 	.word	0x08004bc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f9cc 	bl	8004ea4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0208 	orr.w	r2, r2, #8
 8004b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0204 	bic.w	r2, r2, #4
 8004b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6999      	ldr	r1, [r3, #24]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	691a      	ldr	r2, [r3, #16]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	619a      	str	r2, [r3, #24]
      break;
 8004b3e:	e062      	b.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fa12 	bl	8004f70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6999      	ldr	r1, [r3, #24]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	021a      	lsls	r2, r3, #8
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	619a      	str	r2, [r3, #24]
      break;
 8004b80:	e041      	b.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fa5b 	bl	8005044 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0208 	orr.w	r2, r2, #8
 8004b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0204 	bic.w	r2, r2, #4
 8004bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69d9      	ldr	r1, [r3, #28]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	61da      	str	r2, [r3, #28]
      break;
 8004bc0:	e021      	b.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68b9      	ldr	r1, [r7, #8]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 faa5 	bl	8005118 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69d9      	ldr	r1, [r3, #28]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	021a      	lsls	r2, r3, #8
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	61da      	str	r2, [r3, #28]
      break;
 8004c02:	e000      	b.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004c04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_TIM_ConfigClockSource+0x18>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e0a6      	b.n	8004d7e <HAL_TIM_ConfigClockSource+0x166>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d067      	beq.n	8004d38 <HAL_TIM_ConfigClockSource+0x120>
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d80b      	bhi.n	8004c84 <HAL_TIM_ConfigClockSource+0x6c>
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d073      	beq.n	8004d58 <HAL_TIM_ConfigClockSource+0x140>
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d802      	bhi.n	8004c7a <HAL_TIM_ConfigClockSource+0x62>
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d06f      	beq.n	8004d58 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c78:	e078      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d06c      	beq.n	8004d58 <HAL_TIM_ConfigClockSource+0x140>
 8004c7e:	2b30      	cmp	r3, #48	; 0x30
 8004c80:	d06a      	beq.n	8004d58 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c82:	e073      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c84:	2b70      	cmp	r3, #112	; 0x70
 8004c86:	d00d      	beq.n	8004ca4 <HAL_TIM_ConfigClockSource+0x8c>
 8004c88:	2b70      	cmp	r3, #112	; 0x70
 8004c8a:	d804      	bhi.n	8004c96 <HAL_TIM_ConfigClockSource+0x7e>
 8004c8c:	2b50      	cmp	r3, #80	; 0x50
 8004c8e:	d033      	beq.n	8004cf8 <HAL_TIM_ConfigClockSource+0xe0>
 8004c90:	2b60      	cmp	r3, #96	; 0x60
 8004c92:	d041      	beq.n	8004d18 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c94:	e06a      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9a:	d066      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x152>
 8004c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca0:	d017      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004ca2:	e063      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	6899      	ldr	r1, [r3, #8]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f000 faf5 	bl	80052a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cc6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	609a      	str	r2, [r3, #8]
      break;
 8004cd0:	e04c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6818      	ldr	r0, [r3, #0]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6899      	ldr	r1, [r3, #8]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f000 fade 	bl	80052a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cf4:	609a      	str	r2, [r3, #8]
      break;
 8004cf6:	e039      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6859      	ldr	r1, [r3, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	461a      	mov	r2, r3
 8004d06:	f000 fa55 	bl	80051b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2150      	movs	r1, #80	; 0x50
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 faac 	bl	800526e <TIM_ITRx_SetConfig>
      break;
 8004d16:	e029      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	6859      	ldr	r1, [r3, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	461a      	mov	r2, r3
 8004d26:	f000 fa73 	bl	8005210 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2160      	movs	r1, #96	; 0x60
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fa9c 	bl	800526e <TIM_ITRx_SetConfig>
      break;
 8004d36:	e019      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	6859      	ldr	r1, [r3, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	461a      	mov	r2, r3
 8004d46:	f000 fa35 	bl	80051b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2140      	movs	r1, #64	; 0x40
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fa8c 	bl	800526e <TIM_ITRx_SetConfig>
      break;
 8004d56:	e009      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f000 fa83 	bl	800526e <TIM_ITRx_SetConfig>
        break;
 8004d68:	e000      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr

08004daa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr

08004dbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr

08004dce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr

08004de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a29      	ldr	r2, [pc, #164]	; (8004e98 <TIM_Base_SetConfig+0xb8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00b      	beq.n	8004e10 <TIM_Base_SetConfig+0x30>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfe:	d007      	beq.n	8004e10 <TIM_Base_SetConfig+0x30>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a26      	ldr	r2, [pc, #152]	; (8004e9c <TIM_Base_SetConfig+0xbc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_Base_SetConfig+0x30>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a25      	ldr	r2, [pc, #148]	; (8004ea0 <TIM_Base_SetConfig+0xc0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d108      	bne.n	8004e22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a1c      	ldr	r2, [pc, #112]	; (8004e98 <TIM_Base_SetConfig+0xb8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00b      	beq.n	8004e42 <TIM_Base_SetConfig+0x62>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d007      	beq.n	8004e42 <TIM_Base_SetConfig+0x62>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a19      	ldr	r2, [pc, #100]	; (8004e9c <TIM_Base_SetConfig+0xbc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d003      	beq.n	8004e42 <TIM_Base_SetConfig+0x62>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a18      	ldr	r2, [pc, #96]	; (8004ea0 <TIM_Base_SetConfig+0xc0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d108      	bne.n	8004e54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a07      	ldr	r2, [pc, #28]	; (8004e98 <TIM_Base_SetConfig+0xb8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d103      	bne.n	8004e88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	615a      	str	r2, [r3, #20]
}
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bc80      	pop	{r7}
 8004e96:	4770      	bx	lr
 8004e98:	40012c00 	.word	0x40012c00
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40000800 	.word	0x40000800

08004ea4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	f023 0201 	bic.w	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0303 	bic.w	r3, r3, #3
 8004eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f023 0302 	bic.w	r3, r3, #2
 8004eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a1c      	ldr	r2, [pc, #112]	; (8004f6c <TIM_OC1_SetConfig+0xc8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10c      	bne.n	8004f1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0308 	bic.w	r3, r3, #8
 8004f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f023 0304 	bic.w	r3, r3, #4
 8004f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a13      	ldr	r2, [pc, #76]	; (8004f6c <TIM_OC1_SetConfig+0xc8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d111      	bne.n	8004f46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	621a      	str	r2, [r3, #32]
}
 8004f60:	bf00      	nop
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40012c00 	.word	0x40012c00

08004f70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	f023 0210 	bic.w	r2, r3, #16
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f023 0320 	bic.w	r3, r3, #32
 8004fba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a1d      	ldr	r2, [pc, #116]	; (8005040 <TIM_OC2_SetConfig+0xd0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d10d      	bne.n	8004fec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a14      	ldr	r2, [pc, #80]	; (8005040 <TIM_OC2_SetConfig+0xd0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d113      	bne.n	800501c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ffa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005002:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	621a      	str	r2, [r3, #32]
}
 8005036:	bf00      	nop
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr
 8005040:	40012c00 	.word	0x40012c00

08005044 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0303 	bic.w	r3, r3, #3
 800507a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800508c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a1d      	ldr	r2, [pc, #116]	; (8005114 <TIM_OC3_SetConfig+0xd0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d10d      	bne.n	80050be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a14      	ldr	r2, [pc, #80]	; (8005114 <TIM_OC3_SetConfig+0xd0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d113      	bne.n	80050ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	621a      	str	r2, [r3, #32]
}
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40012c00 	.word	0x40012c00

08005118 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	031b      	lsls	r3, r3, #12
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a0f      	ldr	r2, [pc, #60]	; (80051b0 <TIM_OC4_SetConfig+0x98>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d109      	bne.n	800518c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800517e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	019b      	lsls	r3, r3, #6
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr
 80051b0:	40012c00 	.word	0x40012c00

080051b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f023 0201 	bic.w	r2, r3, #1
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f023 030a 	bic.w	r3, r3, #10
 80051f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr

08005210 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	f023 0210 	bic.w	r2, r3, #16
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800523a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	031b      	lsls	r3, r3, #12
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800524c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	621a      	str	r2, [r3, #32]
}
 8005264:	bf00      	nop
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr

0800526e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800526e:	b480      	push	{r7}
 8005270:	b085      	sub	sp, #20
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	f043 0307 	orr.w	r3, r3, #7
 8005290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	609a      	str	r2, [r3, #8]
}
 8005298:	bf00      	nop
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr

080052a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b087      	sub	sp, #28
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
 80052ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	021a      	lsls	r2, r3, #8
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	609a      	str	r2, [r3, #8]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr

080052e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 031f 	and.w	r3, r3, #31
 80052f2:	2201      	movs	r2, #1
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a1a      	ldr	r2, [r3, #32]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	43db      	mvns	r3, r3
 8005302:	401a      	ands	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	fa01 f303 	lsl.w	r3, r1, r3
 8005318:	431a      	orrs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]
}
 800531e:	bf00      	nop
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr

08005328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800533c:	2302      	movs	r3, #2
 800533e:	e046      	b.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a16      	ldr	r2, [pc, #88]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00e      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538c:	d009      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a12      	ldr	r2, [pc, #72]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d004      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a10      	ldr	r2, [pc, #64]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d10c      	bne.n	80053bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr
 80053d8:	40012c00 	.word	0x40012c00
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800

080053e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr

080053f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr

08005408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e03f      	b.n	800549a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fb fe38 	bl	80010a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2224      	movs	r2, #36	; 0x24
 8005438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800544a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f829 	bl	80054a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	695a      	ldr	r2, [r3, #20]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80054de:	f023 030c 	bic.w	r3, r3, #12
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6812      	ldr	r2, [r2, #0]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	430b      	orrs	r3, r1
 80054ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a2c      	ldr	r2, [pc, #176]	; (80055b8 <UART_SetConfig+0x114>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d103      	bne.n	8005514 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800550c:	f7ff f842 	bl	8004594 <HAL_RCC_GetPCLK2Freq>
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	e002      	b.n	800551a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005514:	f7ff f82a 	bl	800456c <HAL_RCC_GetPCLK1Freq>
 8005518:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	009a      	lsls	r2, r3, #2
 8005524:	441a      	add	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005530:	4a22      	ldr	r2, [pc, #136]	; (80055bc <UART_SetConfig+0x118>)
 8005532:	fba2 2303 	umull	r2, r3, r2, r3
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	0119      	lsls	r1, r3, #4
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009a      	lsls	r2, r3, #2
 8005544:	441a      	add	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005550:	4b1a      	ldr	r3, [pc, #104]	; (80055bc <UART_SetConfig+0x118>)
 8005552:	fba3 0302 	umull	r0, r3, r3, r2
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	2064      	movs	r0, #100	; 0x64
 800555a:	fb00 f303 	mul.w	r3, r0, r3
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	3332      	adds	r3, #50	; 0x32
 8005564:	4a15      	ldr	r2, [pc, #84]	; (80055bc <UART_SetConfig+0x118>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005570:	4419      	add	r1, r3
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	009a      	lsls	r2, r3, #2
 800557c:	441a      	add	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	fbb2 f2f3 	udiv	r2, r2, r3
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <UART_SetConfig+0x118>)
 800558a:	fba3 0302 	umull	r0, r3, r3, r2
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	2064      	movs	r0, #100	; 0x64
 8005592:	fb00 f303 	mul.w	r3, r0, r3
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	3332      	adds	r3, #50	; 0x32
 800559c:	4a07      	ldr	r2, [pc, #28]	; (80055bc <UART_SetConfig+0x118>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	f003 020f 	and.w	r2, r3, #15
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	440a      	add	r2, r1
 80055ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80055b0:	bf00      	nop
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40013800 	.word	0x40013800
 80055bc:	51eb851f 	.word	0x51eb851f

080055c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80055ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055d2:	2b84      	cmp	r3, #132	; 0x84
 80055d4:	d005      	beq.n	80055e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80055d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4413      	add	r3, r2
 80055de:	3303      	adds	r3, #3
 80055e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80055e2:	68fb      	ldr	r3, [r7, #12]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bc80      	pop	{r7}
 80055ec:	4770      	bx	lr

080055ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80055f2:	f000 fb33 	bl	8005c5c <vTaskStartScheduler>
  
  return osOK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	bd80      	pop	{r7, pc}

080055fc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80055fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055fe:	b089      	sub	sp, #36	; 0x24
 8005600:	af04      	add	r7, sp, #16
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d020      	beq.n	8005650 <osThreadCreate+0x54>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d01c      	beq.n	8005650 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685c      	ldr	r4, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681d      	ldr	r5, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691e      	ldr	r6, [r3, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff ffc9 	bl	80055c0 <makeFreeRtosPriority>
 800562e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005638:	9202      	str	r2, [sp, #8]
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	9100      	str	r1, [sp, #0]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	4632      	mov	r2, r6
 8005642:	4629      	mov	r1, r5
 8005644:	4620      	mov	r0, r4
 8005646:	f000 f8d4 	bl	80057f2 <xTaskCreateStatic>
 800564a:	4603      	mov	r3, r0
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	e01c      	b.n	800568a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685c      	ldr	r4, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800565c:	b29e      	uxth	r6, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff ffab 	bl	80055c0 <makeFreeRtosPriority>
 800566a:	4602      	mov	r2, r0
 800566c:	f107 030c 	add.w	r3, r7, #12
 8005670:	9301      	str	r3, [sp, #4]
 8005672:	9200      	str	r2, [sp, #0]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	4632      	mov	r2, r6
 8005678:	4629      	mov	r1, r5
 800567a:	4620      	mov	r0, r4
 800567c:	f000 f912 	bl	80058a4 <xTaskCreate>
 8005680:	4603      	mov	r3, r0
 8005682:	2b01      	cmp	r3, #1
 8005684:	d001      	beq.n	800568a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005686:	2300      	movs	r3, #0
 8005688:	e000      	b.n	800568c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800568a:	68fb      	ldr	r3, [r7, #12]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005694 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f103 0208 	add.w	r2, r3, #8
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f103 0208 	add.w	r2, r3, #8
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f103 0208 	add.w	r2, r3, #8
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr

080056d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr

080056ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056ea:	b480      	push	{r7}
 80056ec:	b085      	sub	sp, #20
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	601a      	str	r2, [r3, #0]
}
 8005726:	bf00      	nop
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr

08005730 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005746:	d103      	bne.n	8005750 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	e00c      	b.n	800576a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3308      	adds	r3, #8
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	e002      	b.n	800575e <vListInsert+0x2e>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	429a      	cmp	r2, r3
 8005768:	d2f6      	bcs.n	8005758 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	601a      	str	r2, [r3, #0]
}
 8005796:	bf00      	nop
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr

080057a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6892      	ldr	r2, [r2, #8]
 80057b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6852      	ldr	r2, [r2, #4]
 80057c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d103      	bne.n	80057d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	1e5a      	subs	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr

080057f2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b08e      	sub	sp, #56	; 0x38
 80057f6:	af04      	add	r7, sp, #16
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	607a      	str	r2, [r7, #4]
 80057fe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005802:	2b00      	cmp	r3, #0
 8005804:	d109      	bne.n	800581a <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	623b      	str	r3, [r7, #32]
 8005818:	e7fe      	b.n	8005818 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800581a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581c:	2b00      	cmp	r3, #0
 800581e:	d109      	bne.n	8005834 <xTaskCreateStatic+0x42>
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	e7fe      	b.n	8005832 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005834:	2354      	movs	r3, #84	; 0x54
 8005836:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	2b54      	cmp	r3, #84	; 0x54
 800583c:	d009      	beq.n	8005852 <xTaskCreateStatic+0x60>
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e7fe      	b.n	8005850 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01e      	beq.n	8005896 <xTaskCreateStatic+0xa4>
 8005858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585a:	2b00      	cmp	r3, #0
 800585c:	d01b      	beq.n	8005896 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005866:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	2202      	movs	r2, #2
 800586c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005870:	2300      	movs	r3, #0
 8005872:	9303      	str	r3, [sp, #12]
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	9302      	str	r3, [sp, #8]
 8005878:	f107 0314 	add.w	r3, r7, #20
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f850 	bl	800592e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800588e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005890:	f000 f8cc 	bl	8005a2c <prvAddNewTaskToReadyList>
 8005894:	e001      	b.n	800589a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800589a:	697b      	ldr	r3, [r7, #20]
	}
 800589c:	4618      	mov	r0, r3
 800589e:	3728      	adds	r7, #40	; 0x28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08c      	sub	sp, #48	; 0x30
 80058a8:	af04      	add	r7, sp, #16
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	4613      	mov	r3, r2
 80058b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058b4:	88fb      	ldrh	r3, [r7, #6]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 fef7 	bl	80066ac <pvPortMalloc>
 80058be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00e      	beq.n	80058e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80058c6:	2054      	movs	r0, #84	; 0x54
 80058c8:	f000 fef0 	bl	80066ac <pvPortMalloc>
 80058cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	631a      	str	r2, [r3, #48]	; 0x30
 80058da:	e005      	b.n	80058e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058dc:	6978      	ldr	r0, [r7, #20]
 80058de:	f000 ffa7 	bl	8006830 <vPortFree>
 80058e2:	e001      	b.n	80058e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058e4:	2300      	movs	r3, #0
 80058e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d017      	beq.n	800591e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058f6:	88fa      	ldrh	r2, [r7, #6]
 80058f8:	2300      	movs	r3, #0
 80058fa:	9303      	str	r3, [sp, #12]
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	9302      	str	r3, [sp, #8]
 8005900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005902:	9301      	str	r3, [sp, #4]
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	68b9      	ldr	r1, [r7, #8]
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f80e 	bl	800592e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005912:	69f8      	ldr	r0, [r7, #28]
 8005914:	f000 f88a 	bl	8005a2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005918:	2301      	movs	r3, #1
 800591a:	61bb      	str	r3, [r7, #24]
 800591c:	e002      	b.n	8005924 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
 8005922:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005924:	69bb      	ldr	r3, [r7, #24]
	}
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b088      	sub	sp, #32
 8005932:	af00      	add	r7, sp, #0
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	607a      	str	r2, [r7, #4]
 800593a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005946:	3b01      	subs	r3, #1
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	f023 0307 	bic.w	r3, r3, #7
 8005954:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	2b00      	cmp	r3, #0
 800595e:	d009      	beq.n	8005974 <prvInitialiseNewTask+0x46>
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	e7fe      	b.n	8005972 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005974:	2300      	movs	r3, #0
 8005976:	61fb      	str	r3, [r7, #28]
 8005978:	e012      	b.n	80059a0 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	4413      	add	r3, r2
 8005980:	7819      	ldrb	r1, [r3, #0]
 8005982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	3334      	adds	r3, #52	; 0x34
 800598a:	460a      	mov	r2, r1
 800598c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	4413      	add	r3, r2
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d006      	beq.n	80059a8 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	3301      	adds	r3, #1
 800599e:	61fb      	str	r3, [r7, #28]
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	2b0f      	cmp	r3, #15
 80059a4:	d9e9      	bls.n	800597a <prvInitialiseNewTask+0x4c>
 80059a6:	e000      	b.n	80059aa <prvInitialiseNewTask+0x7c>
		{
			break;
 80059a8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	2b06      	cmp	r3, #6
 80059b6:	d901      	bls.n	80059bc <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059b8:	2306      	movs	r3, #6
 80059ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	2200      	movs	r2, #0
 80059cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	3304      	adds	r3, #4
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff fe7d 	bl	80056d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	3318      	adds	r3, #24
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff fe78 	bl	80056d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	f1c3 0207 	rsb	r2, r3, #7
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	2200      	movs	r2, #0
 80059fc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	68f9      	ldr	r1, [r7, #12]
 8005a0a:	69b8      	ldr	r0, [r7, #24]
 8005a0c:	f000 fcac 	bl	8006368 <pxPortInitialiseStack>
 8005a10:	4602      	mov	r2, r0
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a22:	bf00      	nop
 8005a24:	3720      	adds	r7, #32
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a34:	f000 fd80 	bl	8006538 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a38:	4b2a      	ldr	r3, [pc, #168]	; (8005ae4 <prvAddNewTaskToReadyList+0xb8>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	4a29      	ldr	r2, [pc, #164]	; (8005ae4 <prvAddNewTaskToReadyList+0xb8>)
 8005a40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a42:	4b29      	ldr	r3, [pc, #164]	; (8005ae8 <prvAddNewTaskToReadyList+0xbc>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a4a:	4a27      	ldr	r2, [pc, #156]	; (8005ae8 <prvAddNewTaskToReadyList+0xbc>)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a50:	4b24      	ldr	r3, [pc, #144]	; (8005ae4 <prvAddNewTaskToReadyList+0xb8>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d110      	bne.n	8005a7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a58:	f000 fb44 	bl	80060e4 <prvInitialiseTaskLists>
 8005a5c:	e00d      	b.n	8005a7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a5e:	4b23      	ldr	r3, [pc, #140]	; (8005aec <prvAddNewTaskToReadyList+0xc0>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d109      	bne.n	8005a7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a66:	4b20      	ldr	r3, [pc, #128]	; (8005ae8 <prvAddNewTaskToReadyList+0xbc>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d802      	bhi.n	8005a7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a74:	4a1c      	ldr	r2, [pc, #112]	; (8005ae8 <prvAddNewTaskToReadyList+0xbc>)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a7a:	4b1d      	ldr	r3, [pc, #116]	; (8005af0 <prvAddNewTaskToReadyList+0xc4>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	4a1b      	ldr	r2, [pc, #108]	; (8005af0 <prvAddNewTaskToReadyList+0xc4>)
 8005a82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	2201      	movs	r2, #1
 8005a8a:	409a      	lsls	r2, r3
 8005a8c:	4b19      	ldr	r3, [pc, #100]	; (8005af4 <prvAddNewTaskToReadyList+0xc8>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	4a18      	ldr	r2, [pc, #96]	; (8005af4 <prvAddNewTaskToReadyList+0xc8>)
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4a15      	ldr	r2, [pc, #84]	; (8005af8 <prvAddNewTaskToReadyList+0xcc>)
 8005aa4:	441a      	add	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4610      	mov	r0, r2
 8005aae:	f7ff fe1c 	bl	80056ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ab2:	f000 fd6f 	bl	8006594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <prvAddNewTaskToReadyList+0xc0>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00e      	beq.n	8005adc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005abe:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <prvAddNewTaskToReadyList+0xbc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d207      	bcs.n	8005adc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005acc:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <prvAddNewTaskToReadyList+0xd0>)
 8005ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005adc:	bf00      	nop
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	2000039c 	.word	0x2000039c
 8005ae8:	2000029c 	.word	0x2000029c
 8005aec:	200003a8 	.word	0x200003a8
 8005af0:	200003b8 	.word	0x200003b8
 8005af4:	200003a4 	.word	0x200003a4
 8005af8:	200002a0 	.word	0x200002a0
 8005afc:	e000ed04 	.word	0xe000ed04

08005b00 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08a      	sub	sp, #40	; 0x28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d109      	bne.n	8005b28 <vTaskDelayUntil+0x28>
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	617b      	str	r3, [r7, #20]
 8005b26:	e7fe      	b.n	8005b26 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <vTaskDelayUntil+0x42>
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	e7fe      	b.n	8005b40 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8005b42:	4b29      	ldr	r3, [pc, #164]	; (8005be8 <vTaskDelayUntil+0xe8>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d009      	beq.n	8005b5e <vTaskDelayUntil+0x5e>
 8005b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	e7fe      	b.n	8005b5c <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8005b5e:	f000 f8db 	bl	8005d18 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005b62:	4b22      	ldr	r3, [pc, #136]	; (8005bec <vTaskDelayUntil+0xec>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	4413      	add	r3, r2
 8005b70:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6a3a      	ldr	r2, [r7, #32]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d20b      	bcs.n	8005b94 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d211      	bcs.n	8005baa <vTaskDelayUntil+0xaa>
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d90d      	bls.n	8005baa <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
 8005b92:	e00a      	b.n	8005baa <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d303      	bcc.n	8005ba6 <vTaskDelayUntil+0xa6>
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d901      	bls.n	8005baa <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d006      	beq.n	8005bc4 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fb6c 	bl	800629c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005bc4:	f000 f8b6 	bl	8005d34 <xTaskResumeAll>
 8005bc8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d107      	bne.n	8005be0 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8005bd0:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <vTaskDelayUntil+0xf0>)
 8005bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005be0:	bf00      	nop
 8005be2:	3728      	adds	r7, #40	; 0x28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	200003c4 	.word	0x200003c4
 8005bec:	200003a0 	.word	0x200003a0
 8005bf0:	e000ed04 	.word	0xe000ed04

08005bf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d016      	beq.n	8005c34 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c06:	4b13      	ldr	r3, [pc, #76]	; (8005c54 <vTaskDelay+0x60>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d009      	beq.n	8005c22 <vTaskDelay+0x2e>
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	60bb      	str	r3, [r7, #8]
 8005c20:	e7fe      	b.n	8005c20 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005c22:	f000 f879 	bl	8005d18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c26:	2100      	movs	r1, #0
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fb37 	bl	800629c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c2e:	f000 f881 	bl	8005d34 <xTaskResumeAll>
 8005c32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d107      	bne.n	8005c4a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005c3a:	4b07      	ldr	r3, [pc, #28]	; (8005c58 <vTaskDelay+0x64>)
 8005c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c4a:	bf00      	nop
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	200003c4 	.word	0x200003c4
 8005c58:	e000ed04 	.word	0xe000ed04

08005c5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08a      	sub	sp, #40	; 0x28
 8005c60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c6a:	463a      	mov	r2, r7
 8005c6c:	1d39      	adds	r1, r7, #4
 8005c6e:	f107 0308 	add.w	r3, r7, #8
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fa fa6e 	bl	8000154 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	9202      	str	r2, [sp, #8]
 8005c80:	9301      	str	r3, [sp, #4]
 8005c82:	2300      	movs	r3, #0
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	2300      	movs	r3, #0
 8005c88:	460a      	mov	r2, r1
 8005c8a:	491d      	ldr	r1, [pc, #116]	; (8005d00 <vTaskStartScheduler+0xa4>)
 8005c8c:	481d      	ldr	r0, [pc, #116]	; (8005d04 <vTaskStartScheduler+0xa8>)
 8005c8e:	f7ff fdb0 	bl	80057f2 <xTaskCreateStatic>
 8005c92:	4602      	mov	r2, r0
 8005c94:	4b1c      	ldr	r3, [pc, #112]	; (8005d08 <vTaskStartScheduler+0xac>)
 8005c96:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c98:	4b1b      	ldr	r3, [pc, #108]	; (8005d08 <vTaskStartScheduler+0xac>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	e001      	b.n	8005caa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d115      	bne.n	8005cdc <vTaskStartScheduler+0x80>
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cc2:	4b12      	ldr	r3, [pc, #72]	; (8005d0c <vTaskStartScheduler+0xb0>)
 8005cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cca:	4b11      	ldr	r3, [pc, #68]	; (8005d10 <vTaskStartScheduler+0xb4>)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005cd0:	4b10      	ldr	r3, [pc, #64]	; (8005d14 <vTaskStartScheduler+0xb8>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cd6:	f000 fbbf 	bl	8006458 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cda:	e00d      	b.n	8005cf8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce2:	d109      	bne.n	8005cf8 <vTaskStartScheduler+0x9c>
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	e7fe      	b.n	8005cf6 <vTaskStartScheduler+0x9a>
}
 8005cf8:	bf00      	nop
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	08006b04 	.word	0x08006b04
 8005d04:	080060b5 	.word	0x080060b5
 8005d08:	200003c0 	.word	0x200003c0
 8005d0c:	200003bc 	.word	0x200003bc
 8005d10:	200003a8 	.word	0x200003a8
 8005d14:	200003a0 	.word	0x200003a0

08005d18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d1c:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <vTaskSuspendAll+0x18>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3301      	adds	r3, #1
 8005d22:	4a03      	ldr	r2, [pc, #12]	; (8005d30 <vTaskSuspendAll+0x18>)
 8005d24:	6013      	str	r3, [r2, #0]
}
 8005d26:	bf00      	nop
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	200003c4 	.word	0x200003c4

08005d34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d42:	4b41      	ldr	r3, [pc, #260]	; (8005e48 <xTaskResumeAll+0x114>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d109      	bne.n	8005d5e <xTaskResumeAll+0x2a>
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	e7fe      	b.n	8005d5c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d5e:	f000 fbeb 	bl	8006538 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d62:	4b39      	ldr	r3, [pc, #228]	; (8005e48 <xTaskResumeAll+0x114>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	4a37      	ldr	r2, [pc, #220]	; (8005e48 <xTaskResumeAll+0x114>)
 8005d6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d6c:	4b36      	ldr	r3, [pc, #216]	; (8005e48 <xTaskResumeAll+0x114>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d161      	bne.n	8005e38 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d74:	4b35      	ldr	r3, [pc, #212]	; (8005e4c <xTaskResumeAll+0x118>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d05d      	beq.n	8005e38 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d7c:	e02e      	b.n	8005ddc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005d7e:	4b34      	ldr	r3, [pc, #208]	; (8005e50 <xTaskResumeAll+0x11c>)
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3318      	adds	r3, #24
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff fd08 	bl	80057a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7ff fd03 	bl	80057a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	2201      	movs	r2, #1
 8005da0:	409a      	lsls	r2, r3
 8005da2:	4b2c      	ldr	r3, [pc, #176]	; (8005e54 <xTaskResumeAll+0x120>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	4a2a      	ldr	r2, [pc, #168]	; (8005e54 <xTaskResumeAll+0x120>)
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db0:	4613      	mov	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4a27      	ldr	r2, [pc, #156]	; (8005e58 <xTaskResumeAll+0x124>)
 8005dba:	441a      	add	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	f7ff fc91 	bl	80056ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dcc:	4b23      	ldr	r3, [pc, #140]	; (8005e5c <xTaskResumeAll+0x128>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d302      	bcc.n	8005ddc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005dd6:	4b22      	ldr	r3, [pc, #136]	; (8005e60 <xTaskResumeAll+0x12c>)
 8005dd8:	2201      	movs	r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ddc:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <xTaskResumeAll+0x11c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1cc      	bne.n	8005d7e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dea:	f000 fa15 	bl	8006218 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005dee:	4b1d      	ldr	r3, [pc, #116]	; (8005e64 <xTaskResumeAll+0x130>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d010      	beq.n	8005e1c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dfa:	f000 f845 	bl	8005e88 <xTaskIncrementTick>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005e04:	4b16      	ldr	r3, [pc, #88]	; (8005e60 <xTaskResumeAll+0x12c>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f1      	bne.n	8005dfa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005e16:	4b13      	ldr	r3, [pc, #76]	; (8005e64 <xTaskResumeAll+0x130>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e1c:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <xTaskResumeAll+0x12c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d009      	beq.n	8005e38 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e24:	2301      	movs	r3, #1
 8005e26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e28:	4b0f      	ldr	r3, [pc, #60]	; (8005e68 <xTaskResumeAll+0x134>)
 8005e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e38:	f000 fbac 	bl	8006594 <vPortExitCritical>

	return xAlreadyYielded;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	200003c4 	.word	0x200003c4
 8005e4c:	2000039c 	.word	0x2000039c
 8005e50:	2000035c 	.word	0x2000035c
 8005e54:	200003a4 	.word	0x200003a4
 8005e58:	200002a0 	.word	0x200002a0
 8005e5c:	2000029c 	.word	0x2000029c
 8005e60:	200003b0 	.word	0x200003b0
 8005e64:	200003ac 	.word	0x200003ac
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e72:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <xTaskGetTickCount+0x18>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e78:	687b      	ldr	r3, [r7, #4]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr
 8005e84:	200003a0 	.word	0x200003a0

08005e88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e92:	4b50      	ldr	r3, [pc, #320]	; (8005fd4 <xTaskIncrementTick+0x14c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f040 808c 	bne.w	8005fb4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e9c:	4b4e      	ldr	r3, [pc, #312]	; (8005fd8 <xTaskIncrementTick+0x150>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ea4:	4a4c      	ldr	r2, [pc, #304]	; (8005fd8 <xTaskIncrementTick+0x150>)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d11f      	bne.n	8005ef0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005eb0:	4b4a      	ldr	r3, [pc, #296]	; (8005fdc <xTaskIncrementTick+0x154>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <xTaskIncrementTick+0x46>
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	e7fe      	b.n	8005ecc <xTaskIncrementTick+0x44>
 8005ece:	4b43      	ldr	r3, [pc, #268]	; (8005fdc <xTaskIncrementTick+0x154>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	4b42      	ldr	r3, [pc, #264]	; (8005fe0 <xTaskIncrementTick+0x158>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a40      	ldr	r2, [pc, #256]	; (8005fdc <xTaskIncrementTick+0x154>)
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	4a40      	ldr	r2, [pc, #256]	; (8005fe0 <xTaskIncrementTick+0x158>)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	4b40      	ldr	r3, [pc, #256]	; (8005fe4 <xTaskIncrementTick+0x15c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	4a3e      	ldr	r2, [pc, #248]	; (8005fe4 <xTaskIncrementTick+0x15c>)
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	f000 f994 	bl	8006218 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ef0:	4b3d      	ldr	r3, [pc, #244]	; (8005fe8 <xTaskIncrementTick+0x160>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d34d      	bcc.n	8005f96 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005efa:	4b38      	ldr	r3, [pc, #224]	; (8005fdc <xTaskIncrementTick+0x154>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <xTaskIncrementTick+0x80>
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <xTaskIncrementTick+0x82>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d004      	beq.n	8005f18 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f0e:	4b36      	ldr	r3, [pc, #216]	; (8005fe8 <xTaskIncrementTick+0x160>)
 8005f10:	f04f 32ff 	mov.w	r2, #4294967295
 8005f14:	601a      	str	r2, [r3, #0]
					break;
 8005f16:	e03e      	b.n	8005f96 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f18:	4b30      	ldr	r3, [pc, #192]	; (8005fdc <xTaskIncrementTick+0x154>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d203      	bcs.n	8005f38 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f30:	4a2d      	ldr	r2, [pc, #180]	; (8005fe8 <xTaskIncrementTick+0x160>)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6013      	str	r3, [r2, #0]
						break;
 8005f36:	e02e      	b.n	8005f96 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7ff fc2f 	bl	80057a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d004      	beq.n	8005f54 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	3318      	adds	r3, #24
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fc26 	bl	80057a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	2201      	movs	r2, #1
 8005f5a:	409a      	lsls	r2, r3
 8005f5c:	4b23      	ldr	r3, [pc, #140]	; (8005fec <xTaskIncrementTick+0x164>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	4a22      	ldr	r2, [pc, #136]	; (8005fec <xTaskIncrementTick+0x164>)
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4a1f      	ldr	r2, [pc, #124]	; (8005ff0 <xTaskIncrementTick+0x168>)
 8005f74:	441a      	add	r2, r3
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	f7ff fbb4 	bl	80056ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f86:	4b1b      	ldr	r3, [pc, #108]	; (8005ff4 <xTaskIncrementTick+0x16c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d3b4      	bcc.n	8005efa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005f90:	2301      	movs	r3, #1
 8005f92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f94:	e7b1      	b.n	8005efa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f96:	4b17      	ldr	r3, [pc, #92]	; (8005ff4 <xTaskIncrementTick+0x16c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9c:	4914      	ldr	r1, [pc, #80]	; (8005ff0 <xTaskIncrementTick+0x168>)
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d907      	bls.n	8005fbe <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	e004      	b.n	8005fbe <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005fb4:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <xTaskIncrementTick+0x170>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	4a0f      	ldr	r2, [pc, #60]	; (8005ff8 <xTaskIncrementTick+0x170>)
 8005fbc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005fbe:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <xTaskIncrementTick+0x174>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005fca:	697b      	ldr	r3, [r7, #20]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	200003c4 	.word	0x200003c4
 8005fd8:	200003a0 	.word	0x200003a0
 8005fdc:	20000354 	.word	0x20000354
 8005fe0:	20000358 	.word	0x20000358
 8005fe4:	200003b4 	.word	0x200003b4
 8005fe8:	200003bc 	.word	0x200003bc
 8005fec:	200003a4 	.word	0x200003a4
 8005ff0:	200002a0 	.word	0x200002a0
 8005ff4:	2000029c 	.word	0x2000029c
 8005ff8:	200003ac 	.word	0x200003ac
 8005ffc:	200003b0 	.word	0x200003b0

08006000 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006006:	4b26      	ldr	r3, [pc, #152]	; (80060a0 <vTaskSwitchContext+0xa0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800600e:	4b25      	ldr	r3, [pc, #148]	; (80060a4 <vTaskSwitchContext+0xa4>)
 8006010:	2201      	movs	r2, #1
 8006012:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006014:	e03e      	b.n	8006094 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006016:	4b23      	ldr	r3, [pc, #140]	; (80060a4 <vTaskSwitchContext+0xa4>)
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800601c:	4b22      	ldr	r3, [pc, #136]	; (80060a8 <vTaskSwitchContext+0xa8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	fab3 f383 	clz	r3, r3
 8006028:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800602a:	7afb      	ldrb	r3, [r7, #11]
 800602c:	f1c3 031f 	rsb	r3, r3, #31
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	491e      	ldr	r1, [pc, #120]	; (80060ac <vTaskSwitchContext+0xac>)
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	440b      	add	r3, r1
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d109      	bne.n	800605a <vTaskSwitchContext+0x5a>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	607b      	str	r3, [r7, #4]
 8006058:	e7fe      	b.n	8006058 <vTaskSwitchContext+0x58>
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4a11      	ldr	r2, [pc, #68]	; (80060ac <vTaskSwitchContext+0xac>)
 8006066:	4413      	add	r3, r2
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	605a      	str	r2, [r3, #4]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	3308      	adds	r3, #8
 800607c:	429a      	cmp	r2, r3
 800607e:	d104      	bne.n	800608a <vTaskSwitchContext+0x8a>
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	605a      	str	r2, [r3, #4]
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	4a07      	ldr	r2, [pc, #28]	; (80060b0 <vTaskSwitchContext+0xb0>)
 8006092:	6013      	str	r3, [r2, #0]
}
 8006094:	bf00      	nop
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	bc80      	pop	{r7}
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	200003c4 	.word	0x200003c4
 80060a4:	200003b0 	.word	0x200003b0
 80060a8:	200003a4 	.word	0x200003a4
 80060ac:	200002a0 	.word	0x200002a0
 80060b0:	2000029c 	.word	0x2000029c

080060b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060bc:	f000 f852 	bl	8006164 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060c0:	4b06      	ldr	r3, [pc, #24]	; (80060dc <prvIdleTask+0x28>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d9f9      	bls.n	80060bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80060c8:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <prvIdleTask+0x2c>)
 80060ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060d8:	e7f0      	b.n	80060bc <prvIdleTask+0x8>
 80060da:	bf00      	nop
 80060dc:	200002a0 	.word	0x200002a0
 80060e0:	e000ed04 	.word	0xe000ed04

080060e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060ea:	2300      	movs	r3, #0
 80060ec:	607b      	str	r3, [r7, #4]
 80060ee:	e00c      	b.n	800610a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4a12      	ldr	r2, [pc, #72]	; (8006144 <prvInitialiseTaskLists+0x60>)
 80060fc:	4413      	add	r3, r2
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff fac8 	bl	8005694 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3301      	adds	r3, #1
 8006108:	607b      	str	r3, [r7, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b06      	cmp	r3, #6
 800610e:	d9ef      	bls.n	80060f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006110:	480d      	ldr	r0, [pc, #52]	; (8006148 <prvInitialiseTaskLists+0x64>)
 8006112:	f7ff fabf 	bl	8005694 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006116:	480d      	ldr	r0, [pc, #52]	; (800614c <prvInitialiseTaskLists+0x68>)
 8006118:	f7ff fabc 	bl	8005694 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800611c:	480c      	ldr	r0, [pc, #48]	; (8006150 <prvInitialiseTaskLists+0x6c>)
 800611e:	f7ff fab9 	bl	8005694 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006122:	480c      	ldr	r0, [pc, #48]	; (8006154 <prvInitialiseTaskLists+0x70>)
 8006124:	f7ff fab6 	bl	8005694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006128:	480b      	ldr	r0, [pc, #44]	; (8006158 <prvInitialiseTaskLists+0x74>)
 800612a:	f7ff fab3 	bl	8005694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800612e:	4b0b      	ldr	r3, [pc, #44]	; (800615c <prvInitialiseTaskLists+0x78>)
 8006130:	4a05      	ldr	r2, [pc, #20]	; (8006148 <prvInitialiseTaskLists+0x64>)
 8006132:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006134:	4b0a      	ldr	r3, [pc, #40]	; (8006160 <prvInitialiseTaskLists+0x7c>)
 8006136:	4a05      	ldr	r2, [pc, #20]	; (800614c <prvInitialiseTaskLists+0x68>)
 8006138:	601a      	str	r2, [r3, #0]
}
 800613a:	bf00      	nop
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	200002a0 	.word	0x200002a0
 8006148:	2000032c 	.word	0x2000032c
 800614c:	20000340 	.word	0x20000340
 8006150:	2000035c 	.word	0x2000035c
 8006154:	20000370 	.word	0x20000370
 8006158:	20000388 	.word	0x20000388
 800615c:	20000354 	.word	0x20000354
 8006160:	20000358 	.word	0x20000358

08006164 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800616a:	e019      	b.n	80061a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800616c:	f000 f9e4 	bl	8006538 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006170:	4b0f      	ldr	r3, [pc, #60]	; (80061b0 <prvCheckTasksWaitingTermination+0x4c>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3304      	adds	r3, #4
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff fb0f 	bl	80057a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006182:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <prvCheckTasksWaitingTermination+0x50>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3b01      	subs	r3, #1
 8006188:	4a0a      	ldr	r2, [pc, #40]	; (80061b4 <prvCheckTasksWaitingTermination+0x50>)
 800618a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800618c:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <prvCheckTasksWaitingTermination+0x54>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3b01      	subs	r3, #1
 8006192:	4a09      	ldr	r2, [pc, #36]	; (80061b8 <prvCheckTasksWaitingTermination+0x54>)
 8006194:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006196:	f000 f9fd 	bl	8006594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f80e 	bl	80061bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061a0:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <prvCheckTasksWaitingTermination+0x54>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e1      	bne.n	800616c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061a8:	bf00      	nop
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20000370 	.word	0x20000370
 80061b4:	2000039c 	.word	0x2000039c
 80061b8:	20000384 	.word	0x20000384

080061bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d108      	bne.n	80061e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fb2c 	bl	8006830 <vPortFree>
				vPortFree( pxTCB );
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fb29 	bl	8006830 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061de:	e017      	b.n	8006210 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d103      	bne.n	80061f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fb20 	bl	8006830 <vPortFree>
	}
 80061f0:	e00e      	b.n	8006210 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d009      	beq.n	8006210 <prvDeleteTCB+0x54>
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	e7fe      	b.n	800620e <prvDeleteTCB+0x52>
	}
 8006210:	bf00      	nop
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800621e:	4b0e      	ldr	r3, [pc, #56]	; (8006258 <prvResetNextTaskUnblockTime+0x40>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <prvResetNextTaskUnblockTime+0x14>
 8006228:	2301      	movs	r3, #1
 800622a:	e000      	b.n	800622e <prvResetNextTaskUnblockTime+0x16>
 800622c:	2300      	movs	r3, #0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d004      	beq.n	800623c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006232:	4b0a      	ldr	r3, [pc, #40]	; (800625c <prvResetNextTaskUnblockTime+0x44>)
 8006234:	f04f 32ff 	mov.w	r2, #4294967295
 8006238:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800623a:	e008      	b.n	800624e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800623c:	4b06      	ldr	r3, [pc, #24]	; (8006258 <prvResetNextTaskUnblockTime+0x40>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	4a04      	ldr	r2, [pc, #16]	; (800625c <prvResetNextTaskUnblockTime+0x44>)
 800624c:	6013      	str	r3, [r2, #0]
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr
 8006258:	20000354 	.word	0x20000354
 800625c:	200003bc 	.word	0x200003bc

08006260 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006266:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <xTaskGetSchedulerState+0x34>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800626e:	2301      	movs	r3, #1
 8006270:	607b      	str	r3, [r7, #4]
 8006272:	e008      	b.n	8006286 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006274:	4b08      	ldr	r3, [pc, #32]	; (8006298 <xTaskGetSchedulerState+0x38>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d102      	bne.n	8006282 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800627c:	2302      	movs	r3, #2
 800627e:	607b      	str	r3, [r7, #4]
 8006280:	e001      	b.n	8006286 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006282:	2300      	movs	r3, #0
 8006284:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006286:	687b      	ldr	r3, [r7, #4]
	}
 8006288:	4618      	mov	r0, r3
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	bc80      	pop	{r7}
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	200003a8 	.word	0x200003a8
 8006298:	200003c4 	.word	0x200003c4

0800629c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062a6:	4b29      	ldr	r3, [pc, #164]	; (800634c <prvAddCurrentTaskToDelayedList+0xb0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062ac:	4b28      	ldr	r3, [pc, #160]	; (8006350 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3304      	adds	r3, #4
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff fa74 	bl	80057a0 <uxListRemove>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10b      	bne.n	80062d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80062be:	4b24      	ldr	r3, [pc, #144]	; (8006350 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	2201      	movs	r2, #1
 80062c6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ca:	43da      	mvns	r2, r3
 80062cc:	4b21      	ldr	r3, [pc, #132]	; (8006354 <prvAddCurrentTaskToDelayedList+0xb8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4013      	ands	r3, r2
 80062d2:	4a20      	ldr	r2, [pc, #128]	; (8006354 <prvAddCurrentTaskToDelayedList+0xb8>)
 80062d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062dc:	d10a      	bne.n	80062f4 <prvAddCurrentTaskToDelayedList+0x58>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d007      	beq.n	80062f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062e4:	4b1a      	ldr	r3, [pc, #104]	; (8006350 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3304      	adds	r3, #4
 80062ea:	4619      	mov	r1, r3
 80062ec:	481a      	ldr	r0, [pc, #104]	; (8006358 <prvAddCurrentTaskToDelayedList+0xbc>)
 80062ee:	f7ff f9fc 	bl	80056ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062f2:	e026      	b.n	8006342 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4413      	add	r3, r2
 80062fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062fc:	4b14      	ldr	r3, [pc, #80]	; (8006350 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	429a      	cmp	r2, r3
 800630a:	d209      	bcs.n	8006320 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800630c:	4b13      	ldr	r3, [pc, #76]	; (800635c <prvAddCurrentTaskToDelayedList+0xc0>)
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3304      	adds	r3, #4
 8006316:	4619      	mov	r1, r3
 8006318:	4610      	mov	r0, r2
 800631a:	f7ff fa09 	bl	8005730 <vListInsert>
}
 800631e:	e010      	b.n	8006342 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006320:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3304      	adds	r3, #4
 800632a:	4619      	mov	r1, r3
 800632c:	4610      	mov	r0, r2
 800632e:	f7ff f9ff 	bl	8005730 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006332:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	429a      	cmp	r2, r3
 800633a:	d202      	bcs.n	8006342 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800633c:	4a09      	ldr	r2, [pc, #36]	; (8006364 <prvAddCurrentTaskToDelayedList+0xc8>)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	6013      	str	r3, [r2, #0]
}
 8006342:	bf00      	nop
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	200003a0 	.word	0x200003a0
 8006350:	2000029c 	.word	0x2000029c
 8006354:	200003a4 	.word	0x200003a4
 8006358:	20000388 	.word	0x20000388
 800635c:	20000358 	.word	0x20000358
 8006360:	20000354 	.word	0x20000354
 8006364:	200003bc 	.word	0x200003bc

08006368 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3b04      	subs	r3, #4
 8006378:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3b04      	subs	r3, #4
 8006386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f023 0201 	bic.w	r2, r3, #1
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3b04      	subs	r3, #4
 8006396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006398:	4a08      	ldr	r2, [pc, #32]	; (80063bc <pxPortInitialiseStack+0x54>)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3b14      	subs	r3, #20
 80063a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3b20      	subs	r3, #32
 80063ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063b0:	68fb      	ldr	r3, [r7, #12]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr
 80063bc:	080063c1 	.word	0x080063c1

080063c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063ca:	4b10      	ldr	r3, [pc, #64]	; (800640c <prvTaskExitError+0x4c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d2:	d009      	beq.n	80063e8 <prvTaskExitError+0x28>
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	60fb      	str	r3, [r7, #12]
 80063e6:	e7fe      	b.n	80063e6 <prvTaskExitError+0x26>
 80063e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063fa:	bf00      	nop
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0fc      	beq.n	80063fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006402:	bf00      	nop
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	bc80      	pop	{r7}
 800640a:	4770      	bx	lr
 800640c:	2000000c 	.word	0x2000000c

08006410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006410:	4b07      	ldr	r3, [pc, #28]	; (8006430 <pxCurrentTCBConst2>)
 8006412:	6819      	ldr	r1, [r3, #0]
 8006414:	6808      	ldr	r0, [r1, #0]
 8006416:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800641a:	f380 8809 	msr	PSP, r0
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f04f 0000 	mov.w	r0, #0
 8006426:	f380 8811 	msr	BASEPRI, r0
 800642a:	f04e 0e0d 	orr.w	lr, lr, #13
 800642e:	4770      	bx	lr

08006430 <pxCurrentTCBConst2>:
 8006430:	2000029c 	.word	0x2000029c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop

08006438 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006438:	4806      	ldr	r0, [pc, #24]	; (8006454 <prvPortStartFirstTask+0x1c>)
 800643a:	6800      	ldr	r0, [r0, #0]
 800643c:	6800      	ldr	r0, [r0, #0]
 800643e:	f380 8808 	msr	MSP, r0
 8006442:	b662      	cpsie	i
 8006444:	b661      	cpsie	f
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	df00      	svc	0
 8006450:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006452:	bf00      	nop
 8006454:	e000ed08 	.word	0xe000ed08

08006458 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800645e:	4b31      	ldr	r3, [pc, #196]	; (8006524 <xPortStartScheduler+0xcc>)
 8006460:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	b2db      	uxtb	r3, r3
 8006468:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	22ff      	movs	r2, #255	; 0xff
 800646e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	b2db      	uxtb	r3, r3
 800647c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006480:	b2da      	uxtb	r2, r3
 8006482:	4b29      	ldr	r3, [pc, #164]	; (8006528 <xPortStartScheduler+0xd0>)
 8006484:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006486:	4b29      	ldr	r3, [pc, #164]	; (800652c <xPortStartScheduler+0xd4>)
 8006488:	2207      	movs	r2, #7
 800648a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800648c:	e009      	b.n	80064a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800648e:	4b27      	ldr	r3, [pc, #156]	; (800652c <xPortStartScheduler+0xd4>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3b01      	subs	r3, #1
 8006494:	4a25      	ldr	r2, [pc, #148]	; (800652c <xPortStartScheduler+0xd4>)
 8006496:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	b2db      	uxtb	r3, r3
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064aa:	2b80      	cmp	r3, #128	; 0x80
 80064ac:	d0ef      	beq.n	800648e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064ae:	4b1f      	ldr	r3, [pc, #124]	; (800652c <xPortStartScheduler+0xd4>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f1c3 0307 	rsb	r3, r3, #7
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d009      	beq.n	80064ce <xPortStartScheduler+0x76>
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	60bb      	str	r3, [r7, #8]
 80064cc:	e7fe      	b.n	80064cc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064ce:	4b17      	ldr	r3, [pc, #92]	; (800652c <xPortStartScheduler+0xd4>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	021b      	lsls	r3, r3, #8
 80064d4:	4a15      	ldr	r2, [pc, #84]	; (800652c <xPortStartScheduler+0xd4>)
 80064d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064d8:	4b14      	ldr	r3, [pc, #80]	; (800652c <xPortStartScheduler+0xd4>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064e0:	4a12      	ldr	r2, [pc, #72]	; (800652c <xPortStartScheduler+0xd4>)
 80064e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064ec:	4b10      	ldr	r3, [pc, #64]	; (8006530 <xPortStartScheduler+0xd8>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a0f      	ldr	r2, [pc, #60]	; (8006530 <xPortStartScheduler+0xd8>)
 80064f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064f8:	4b0d      	ldr	r3, [pc, #52]	; (8006530 <xPortStartScheduler+0xd8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a0c      	ldr	r2, [pc, #48]	; (8006530 <xPortStartScheduler+0xd8>)
 80064fe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006502:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006504:	f000 f8b0 	bl	8006668 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006508:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <xPortStartScheduler+0xdc>)
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800650e:	f7ff ff93 	bl	8006438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006512:	f7ff fd75 	bl	8006000 <vTaskSwitchContext>
	prvTaskExitError();
 8006516:	f7ff ff53 	bl	80063c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	e000e400 	.word	0xe000e400
 8006528:	200003c8 	.word	0x200003c8
 800652c:	200003cc 	.word	0x200003cc
 8006530:	e000ed20 	.word	0xe000ed20
 8006534:	2000000c 	.word	0x2000000c

08006538 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006550:	4b0e      	ldr	r3, [pc, #56]	; (800658c <vPortEnterCritical+0x54>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3301      	adds	r3, #1
 8006556:	4a0d      	ldr	r2, [pc, #52]	; (800658c <vPortEnterCritical+0x54>)
 8006558:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800655a:	4b0c      	ldr	r3, [pc, #48]	; (800658c <vPortEnterCritical+0x54>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d10e      	bne.n	8006580 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006562:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <vPortEnterCritical+0x58>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d009      	beq.n	8006580 <vPortEnterCritical+0x48>
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	603b      	str	r3, [r7, #0]
 800657e:	e7fe      	b.n	800657e <vPortEnterCritical+0x46>
	}
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	2000000c 	.word	0x2000000c
 8006590:	e000ed04 	.word	0xe000ed04

08006594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800659a:	4b10      	ldr	r3, [pc, #64]	; (80065dc <vPortExitCritical+0x48>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <vPortExitCritical+0x22>
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	607b      	str	r3, [r7, #4]
 80065b4:	e7fe      	b.n	80065b4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80065b6:	4b09      	ldr	r3, [pc, #36]	; (80065dc <vPortExitCritical+0x48>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	4a07      	ldr	r2, [pc, #28]	; (80065dc <vPortExitCritical+0x48>)
 80065be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065c0:	4b06      	ldr	r3, [pc, #24]	; (80065dc <vPortExitCritical+0x48>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d104      	bne.n	80065d2 <vPortExitCritical+0x3e>
 80065c8:	2300      	movs	r3, #0
 80065ca:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bc80      	pop	{r7}
 80065da:	4770      	bx	lr
 80065dc:	2000000c 	.word	0x2000000c

080065e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065e0:	f3ef 8009 	mrs	r0, PSP
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <pxCurrentTCBConst>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80065f0:	6010      	str	r0, [r2, #0]
 80065f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80065f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065fa:	f380 8811 	msr	BASEPRI, r0
 80065fe:	f7ff fcff 	bl	8006000 <vTaskSwitchContext>
 8006602:	f04f 0000 	mov.w	r0, #0
 8006606:	f380 8811 	msr	BASEPRI, r0
 800660a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800660e:	6819      	ldr	r1, [r3, #0]
 8006610:	6808      	ldr	r0, [r1, #0]
 8006612:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006616:	f380 8809 	msr	PSP, r0
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	4770      	bx	lr

08006620 <pxCurrentTCBConst>:
 8006620:	2000029c 	.word	0x2000029c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop

08006628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006640:	f7ff fc22 	bl	8005e88 <xTaskIncrementTick>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800664a:	4b06      	ldr	r3, [pc, #24]	; (8006664 <xPortSysTickHandler+0x3c>)
 800664c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	2300      	movs	r3, #0
 8006654:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800665c:	bf00      	nop
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	e000ed04 	.word	0xe000ed04

08006668 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800666c:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <vPortSetupTimerInterrupt+0x30>)
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006672:	4b0a      	ldr	r3, [pc, #40]	; (800669c <vPortSetupTimerInterrupt+0x34>)
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006678:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <vPortSetupTimerInterrupt+0x38>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a09      	ldr	r2, [pc, #36]	; (80066a4 <vPortSetupTimerInterrupt+0x3c>)
 800667e:	fba2 2303 	umull	r2, r3, r2, r3
 8006682:	099b      	lsrs	r3, r3, #6
 8006684:	4a08      	ldr	r2, [pc, #32]	; (80066a8 <vPortSetupTimerInterrupt+0x40>)
 8006686:	3b01      	subs	r3, #1
 8006688:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800668a:	4b03      	ldr	r3, [pc, #12]	; (8006698 <vPortSetupTimerInterrupt+0x30>)
 800668c:	2207      	movs	r2, #7
 800668e:	601a      	str	r2, [r3, #0]
}
 8006690:	bf00      	nop
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr
 8006698:	e000e010 	.word	0xe000e010
 800669c:	e000e018 	.word	0xe000e018
 80066a0:	20000000 	.word	0x20000000
 80066a4:	10624dd3 	.word	0x10624dd3
 80066a8:	e000e014 	.word	0xe000e014

080066ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08a      	sub	sp, #40	; 0x28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066b4:	2300      	movs	r3, #0
 80066b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066b8:	f7ff fb2e 	bl	8005d18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066bc:	4b57      	ldr	r3, [pc, #348]	; (800681c <pvPortMalloc+0x170>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066c4:	f000 f90c 	bl	80068e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066c8:	4b55      	ldr	r3, [pc, #340]	; (8006820 <pvPortMalloc+0x174>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4013      	ands	r3, r2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f040 808c 	bne.w	80067ee <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01c      	beq.n	8006716 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80066dc:	2208      	movs	r2, #8
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4413      	add	r3, r2
 80066e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d013      	beq.n	8006716 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f023 0307 	bic.w	r3, r3, #7
 80066f4:	3308      	adds	r3, #8
 80066f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d009      	beq.n	8006716 <pvPortMalloc+0x6a>
	__asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	e7fe      	b.n	8006714 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d068      	beq.n	80067ee <pvPortMalloc+0x142>
 800671c:	4b41      	ldr	r3, [pc, #260]	; (8006824 <pvPortMalloc+0x178>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	429a      	cmp	r2, r3
 8006724:	d863      	bhi.n	80067ee <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006726:	4b40      	ldr	r3, [pc, #256]	; (8006828 <pvPortMalloc+0x17c>)
 8006728:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800672a:	4b3f      	ldr	r3, [pc, #252]	; (8006828 <pvPortMalloc+0x17c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006730:	e004      	b.n	800673c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	429a      	cmp	r2, r3
 8006744:	d903      	bls.n	800674e <pvPortMalloc+0xa2>
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f1      	bne.n	8006732 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800674e:	4b33      	ldr	r3, [pc, #204]	; (800681c <pvPortMalloc+0x170>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006754:	429a      	cmp	r2, r3
 8006756:	d04a      	beq.n	80067ee <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2208      	movs	r2, #8
 800675e:	4413      	add	r3, r2
 8006760:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	1ad2      	subs	r2, r2, r3
 8006772:	2308      	movs	r3, #8
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	429a      	cmp	r2, r3
 8006778:	d91e      	bls.n	80067b8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800677a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4413      	add	r3, r2
 8006780:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	2b00      	cmp	r3, #0
 800678a:	d009      	beq.n	80067a0 <pvPortMalloc+0xf4>
 800678c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	613b      	str	r3, [r7, #16]
 800679e:	e7fe      	b.n	800679e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	1ad2      	subs	r2, r2, r3
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067b2:	69b8      	ldr	r0, [r7, #24]
 80067b4:	f000 f8f6 	bl	80069a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067b8:	4b1a      	ldr	r3, [pc, #104]	; (8006824 <pvPortMalloc+0x178>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	4a18      	ldr	r2, [pc, #96]	; (8006824 <pvPortMalloc+0x178>)
 80067c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067c6:	4b17      	ldr	r3, [pc, #92]	; (8006824 <pvPortMalloc+0x178>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4b18      	ldr	r3, [pc, #96]	; (800682c <pvPortMalloc+0x180>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d203      	bcs.n	80067da <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067d2:	4b14      	ldr	r3, [pc, #80]	; (8006824 <pvPortMalloc+0x178>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a15      	ldr	r2, [pc, #84]	; (800682c <pvPortMalloc+0x180>)
 80067d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	4b10      	ldr	r3, [pc, #64]	; (8006820 <pvPortMalloc+0x174>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	431a      	orrs	r2, r3
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	2200      	movs	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067ee:	f7ff faa1 	bl	8005d34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d009      	beq.n	8006810 <pvPortMalloc+0x164>
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e7fe      	b.n	800680e <pvPortMalloc+0x162>
	return pvReturn;
 8006810:	69fb      	ldr	r3, [r7, #28]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3728      	adds	r7, #40	; 0x28
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000fd8 	.word	0x20000fd8
 8006820:	20000fe4 	.word	0x20000fe4
 8006824:	20000fdc 	.word	0x20000fdc
 8006828:	20000fd0 	.word	0x20000fd0
 800682c:	20000fe0 	.word	0x20000fe0

08006830 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d046      	beq.n	80068d0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006842:	2308      	movs	r3, #8
 8006844:	425b      	negs	r3, r3
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4413      	add	r3, r2
 800684a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	4b20      	ldr	r3, [pc, #128]	; (80068d8 <vPortFree+0xa8>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4013      	ands	r3, r2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <vPortFree+0x42>
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	e7fe      	b.n	8006870 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <vPortFree+0x5e>
 800687a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	60bb      	str	r3, [r7, #8]
 800688c:	e7fe      	b.n	800688c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <vPortFree+0xa8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4013      	ands	r3, r2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d019      	beq.n	80068d0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d115      	bne.n	80068d0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <vPortFree+0xa8>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	43db      	mvns	r3, r3
 80068ae:	401a      	ands	r2, r3
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068b4:	f7ff fa30 	bl	8005d18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	4b07      	ldr	r3, [pc, #28]	; (80068dc <vPortFree+0xac>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4413      	add	r3, r2
 80068c2:	4a06      	ldr	r2, [pc, #24]	; (80068dc <vPortFree+0xac>)
 80068c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068c6:	6938      	ldr	r0, [r7, #16]
 80068c8:	f000 f86c 	bl	80069a4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80068cc:	f7ff fa32 	bl	8005d34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068d0:	bf00      	nop
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000fe4 	.word	0x20000fe4
 80068dc:	20000fdc 	.word	0x20000fdc

080068e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80068ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068ec:	4b27      	ldr	r3, [pc, #156]	; (800698c <prvHeapInit+0xac>)
 80068ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00c      	beq.n	8006914 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3307      	adds	r3, #7
 80068fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 0307 	bic.w	r3, r3, #7
 8006906:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	4a1f      	ldr	r2, [pc, #124]	; (800698c <prvHeapInit+0xac>)
 8006910:	4413      	add	r3, r2
 8006912:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006918:	4a1d      	ldr	r2, [pc, #116]	; (8006990 <prvHeapInit+0xb0>)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800691e:	4b1c      	ldr	r3, [pc, #112]	; (8006990 <prvHeapInit+0xb0>)
 8006920:	2200      	movs	r2, #0
 8006922:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	4413      	add	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800692c:	2208      	movs	r2, #8
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	1a9b      	subs	r3, r3, r2
 8006932:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0307 	bic.w	r3, r3, #7
 800693a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4a15      	ldr	r2, [pc, #84]	; (8006994 <prvHeapInit+0xb4>)
 8006940:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006942:	4b14      	ldr	r3, [pc, #80]	; (8006994 <prvHeapInit+0xb4>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2200      	movs	r2, #0
 8006948:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800694a:	4b12      	ldr	r3, [pc, #72]	; (8006994 <prvHeapInit+0xb4>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2200      	movs	r2, #0
 8006950:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	1ad2      	subs	r2, r2, r3
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006960:	4b0c      	ldr	r3, [pc, #48]	; (8006994 <prvHeapInit+0xb4>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	4a0a      	ldr	r2, [pc, #40]	; (8006998 <prvHeapInit+0xb8>)
 800696e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	4a09      	ldr	r2, [pc, #36]	; (800699c <prvHeapInit+0xbc>)
 8006976:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006978:	4b09      	ldr	r3, [pc, #36]	; (80069a0 <prvHeapInit+0xc0>)
 800697a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800697e:	601a      	str	r2, [r3, #0]
}
 8006980:	bf00      	nop
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	200003d0 	.word	0x200003d0
 8006990:	20000fd0 	.word	0x20000fd0
 8006994:	20000fd8 	.word	0x20000fd8
 8006998:	20000fe0 	.word	0x20000fe0
 800699c:	20000fdc 	.word	0x20000fdc
 80069a0:	20000fe4 	.word	0x20000fe4

080069a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069ac:	4b27      	ldr	r3, [pc, #156]	; (8006a4c <prvInsertBlockIntoFreeList+0xa8>)
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	e002      	b.n	80069b8 <prvInsertBlockIntoFreeList+0x14>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d8f7      	bhi.n	80069b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	4413      	add	r3, r2
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d108      	bne.n	80069e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	441a      	add	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	441a      	add	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d118      	bne.n	8006a2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	4b14      	ldr	r3, [pc, #80]	; (8006a50 <prvInsertBlockIntoFreeList+0xac>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d00d      	beq.n	8006a22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	441a      	add	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	e008      	b.n	8006a34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a22:	4b0b      	ldr	r3, [pc, #44]	; (8006a50 <prvInsertBlockIntoFreeList+0xac>)
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	e003      	b.n	8006a34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d002      	beq.n	8006a42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a42:	bf00      	nop
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bc80      	pop	{r7}
 8006a4a:	4770      	bx	lr
 8006a4c:	20000fd0 	.word	0x20000fd0
 8006a50:	20000fd8 	.word	0x20000fd8

08006a54 <__libc_init_array>:
 8006a54:	b570      	push	{r4, r5, r6, lr}
 8006a56:	2500      	movs	r5, #0
 8006a58:	4e0c      	ldr	r6, [pc, #48]	; (8006a8c <__libc_init_array+0x38>)
 8006a5a:	4c0d      	ldr	r4, [pc, #52]	; (8006a90 <__libc_init_array+0x3c>)
 8006a5c:	1ba4      	subs	r4, r4, r6
 8006a5e:	10a4      	asrs	r4, r4, #2
 8006a60:	42a5      	cmp	r5, r4
 8006a62:	d109      	bne.n	8006a78 <__libc_init_array+0x24>
 8006a64:	f000 f822 	bl	8006aac <_init>
 8006a68:	2500      	movs	r5, #0
 8006a6a:	4e0a      	ldr	r6, [pc, #40]	; (8006a94 <__libc_init_array+0x40>)
 8006a6c:	4c0a      	ldr	r4, [pc, #40]	; (8006a98 <__libc_init_array+0x44>)
 8006a6e:	1ba4      	subs	r4, r4, r6
 8006a70:	10a4      	asrs	r4, r4, #2
 8006a72:	42a5      	cmp	r5, r4
 8006a74:	d105      	bne.n	8006a82 <__libc_init_array+0x2e>
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
 8006a78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a7c:	4798      	blx	r3
 8006a7e:	3501      	adds	r5, #1
 8006a80:	e7ee      	b.n	8006a60 <__libc_init_array+0xc>
 8006a82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a86:	4798      	blx	r3
 8006a88:	3501      	adds	r5, #1
 8006a8a:	e7f2      	b.n	8006a72 <__libc_init_array+0x1e>
 8006a8c:	08006b28 	.word	0x08006b28
 8006a90:	08006b28 	.word	0x08006b28
 8006a94:	08006b28 	.word	0x08006b28
 8006a98:	08006b2c 	.word	0x08006b2c

08006a9c <memset>:
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	4402      	add	r2, r0
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d100      	bne.n	8006aa6 <memset+0xa>
 8006aa4:	4770      	bx	lr
 8006aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8006aaa:	e7f9      	b.n	8006aa0 <memset+0x4>

08006aac <_init>:
 8006aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aae:	bf00      	nop
 8006ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab2:	bc08      	pop	{r3}
 8006ab4:	469e      	mov	lr, r3
 8006ab6:	4770      	bx	lr

08006ab8 <_fini>:
 8006ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aba:	bf00      	nop
 8006abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006abe:	bc08      	pop	{r3}
 8006ac0:	469e      	mov	lr, r3
 8006ac2:	4770      	bx	lr
